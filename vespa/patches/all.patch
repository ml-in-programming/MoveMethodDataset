diff --git a/application/src/main/java/com/yahoo/application/container/DocumentProcessing.java b/application/src/main/java/com/yahoo/application/container/DocumentProcessing.java
old mode 100644
new mode 100755
index 8e9180f00c..239c1826a5
--- a/application/src/main/java/com/yahoo/application/container/DocumentProcessing.java
+++ b/application/src/main/java/com/yahoo/application/container/DocumentProcessing.java
@@ -62,7 +62,7 @@ public final class DocumentProcessing {
     public DocumentProcessor.Progress process(ComponentSpecification chain, com.yahoo.docproc.Processing processing) {
         DocprocExecutor executor = getExecutor(chain);
         processing.setDocprocServiceRegistry(handler.getDocprocServiceRegistry());
-        return executor.processUntilDone(processing);
+        return processing.processUntilDone(executor);
     }
 
     /**
diff --git a/component/src/main/java/com/yahoo/component/ComponentId.java b/component/src/main/java/com/yahoo/component/ComponentId.java
old mode 100644
new mode 100755
index e1e1b43c08..07f899dbc8
--- a/component/src/main/java/com/yahoo/component/ComponentId.java
+++ b/component/src/main/java/com/yahoo/component/ComponentId.java
@@ -13,6 +13,14 @@ import java.util.concurrent.atomic.AtomicInteger;
  */
 public final class ComponentId implements Comparable<ComponentId> {
 
+    public ComponentSpecification nestInNamespaceOther(ComponentSpecification componentSpecification) {
+        ComponentId newNameSpace =
+                (componentSpecification.getNamespace() == null) ?
+                        this :
+                        componentSpecification.getNamespace().nestInNamespace(this);
+        return new ComponentSpecification(componentSpecification.getName(), componentSpecification.getVersionSpecification(), newNameSpace);
+    }
+
     private final class VersionHandler implements Spec.VersionHandler<Version> {
 
         @Override
diff --git a/component/src/main/java/com/yahoo/component/ComponentSpecification.java b/component/src/main/java/com/yahoo/component/ComponentSpecification.java
old mode 100644
new mode 100755
index a27f66dea2..e392377429
--- a/component/src/main/java/com/yahoo/component/ComponentSpecification.java
+++ b/component/src/main/java/com/yahoo/component/ComponentSpecification.java
@@ -65,14 +65,6 @@ public final class ComponentSpecification {
         this(splitter.name, VersionSpecification.fromString(splitter.version), splitter.namespace);
     }
 
-    public ComponentSpecification nestInNamespace(ComponentId namespace) {
-        ComponentId newNameSpace =
-                (getNamespace() == null) ?
-                        namespace :
-                        getNamespace().nestInNamespace(namespace);
-        return new ComponentSpecification(getName(), getVersionSpecification(), newNameSpace);
-    }
-
     /** The namespace is null if this is to match a top level component id **/
     public ComponentId getNamespace() { return spec.namespace; }
 
diff --git a/config-model/src/main/java/com/yahoo/vespa/model/container/http/JettyHttpServer.java b/config-model/src/main/java/com/yahoo/vespa/model/container/http/JettyHttpServer.java
old mode 100644
new mode 100755
index ab49136751..c1135bfa8c
--- a/config-model/src/main/java/com/yahoo/vespa/model/container/http/JettyHttpServer.java
+++ b/config-model/src/main/java/com/yahoo/vespa/model/container/http/JettyHttpServer.java
@@ -58,7 +58,7 @@ public class JettyHttpServer extends SimpleComponent implements ServerConfig.Pro
         final ComponentSpecification classNameSpec = new ComponentSpecification(
                 className);
         return new ComponentModel(new BundleInstantiationSpecification(
-                classNameSpec.nestInNamespace(parentId),
+                parentId.nestInNamespaceOther(classNameSpec),
                 classNameSpec,
                 null));
     }
diff --git a/configgen/src/main/java/com/yahoo/config/codegen/DefaultValue.java b/configgen/src/main/java/com/yahoo/config/codegen/DefaultValue.java
old mode 100644
new mode 100755
index 07632788d8..0f02ab8c79
--- a/configgen/src/main/java/com/yahoo/config/codegen/DefaultValue.java
+++ b/configgen/src/main/java/com/yahoo/config/codegen/DefaultValue.java
@@ -64,4 +64,13 @@ public class DefaultValue {
         }
     }
 
+    public final void setValue(LeafCNode leafCNode) throws IllegalArgumentException {
+        try {
+            leafCNode.checkDefaultValue(this);
+            leafCNode.setDefaultValue(this);
+        } catch (IllegalArgumentException e) {
+            throw new IllegalArgumentException
+                    ("Invalid default value", e);
+        }
+    }
 }
diff --git a/configgen/src/main/java/com/yahoo/config/codegen/LeafCNode.java b/configgen/src/main/java/com/yahoo/config/codegen/LeafCNode.java
old mode 100644
new mode 100755
index e8dd4221f0..80b8353f86
--- a/configgen/src/main/java/com/yahoo/config/codegen/LeafCNode.java
+++ b/configgen/src/main/java/com/yahoo/config/codegen/LeafCNode.java
@@ -85,7 +85,7 @@ public abstract class LeafCNode extends CNode {
         if (!type.name.equalsIgnoreCase(getType())) {
             throw new IllegalArgumentException("Type " + type.name + " does not match " + getType());
         }
-        setValue(defLine.getDefault());
+        defLine.getDefault().setValue(this);
         setComment(comment);
         restart |= defLine.getRestart();
     }
@@ -95,16 +95,6 @@ public abstract class LeafCNode extends CNode {
         return restart;
     }
 
-    public final void setValue(DefaultValue defaultValue) throws IllegalArgumentException {
-        try {
-            checkDefaultValue(defaultValue);
-            setDefaultValue(defaultValue);
-        } catch (IllegalArgumentException e) {
-            throw new IllegalArgumentException
-                    ("Invalid default value", e);
-        }
-    }
-
     /**
      * Superclass for leaf nodes that should not generate class.
      */
diff --git a/container-search/src/main/java/com/yahoo/search/grouping/vespa/RequestBuilder.java b/container-search/src/main/java/com/yahoo/search/grouping/vespa/RequestBuilder.java
old mode 100644
new mode 100755
index 46b1fecd7d..88bd94b8c9
--- a/container-search/src/main/java/com/yahoo/search/grouping/vespa/RequestBuilder.java
+++ b/container-search/src/main/java/com/yahoo/search/grouping/vespa/RequestBuilder.java
@@ -271,7 +271,7 @@ class RequestBuilder {
         }
         Group group = getLeafGroup(frame);
         for (GroupingExpression exp : lst) {
-            group.addAggregationResult(toAggregationResult(exp, group, frame));
+            toAggregationResult(exp, group, frame).addAggregationResult(group);
         }
     }
 
diff --git a/container-search/src/test/java/com/yahoo/search/grouping/vespa/GroupingExecutorTestCase.java b/container-search/src/test/java/com/yahoo/search/grouping/vespa/GroupingExecutorTestCase.java
old mode 100644
new mode 100755
index 11415b46b8..c602999d83
--- a/container-search/src/test/java/com/yahoo/search/grouping/vespa/GroupingExecutorTestCase.java
+++ b/container-search/src/test/java/com/yahoo/search/grouping/vespa/GroupingExecutorTestCase.java
@@ -178,13 +178,13 @@ public class GroupingExecutorTestCase {
 
         Grouping grpA = new Grouping(0);
         grpA.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("uniqueA")).addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(6)).setTag(4)))
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("common")).addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(9)).setTag(4)))
+                .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(6)).setTag(4).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("uniqueA"))))
+                .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(9)).setTag(4).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("common"))))
         );
         Grouping grpB = new Grouping(0);
         grpB.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("uniqueB")).addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(9)).setTag(4)))
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("common")).addAggregationResult(new MinAggregationResult().setMin(new IntegerResultNode(6)).setTag(3)))
+                .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(9)).setTag(4).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("uniqueB"))))
+                .addChild(new MinAggregationResult().setMin(new IntegerResultNode(6)).setTag(3).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("common"))))
         );
         Execution exec = newExecution(new GroupingExecutor(),
                                       new ResultProvider(Arrays.asList(
@@ -213,11 +213,11 @@ public class GroupingExecutorTestCase {
 
         Grouping grpExpected = new Grouping(0);
         grpExpected.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("expected")).addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(69)).setTag(3)))
+                .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(69)).setTag(3).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("expected"))))
         );
         Grouping grpUnexpected = new Grouping(1);
         grpUnexpected.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("unexpected")).addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(96)).setTag(3)))
+                .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(96)).setTag(3).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("unexpected"))))
         );
         Execution exec = newExecution(new GroupingExecutor(),
                                       new ResultProvider(Arrays.asList(
@@ -242,13 +242,11 @@ public class GroupingExecutorTestCase {
 
         Grouping grp0 = new Grouping(0);
         grp0.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar"))
+                .addChild(new HitsAggregationResult(1, "bar").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         Grouping grp1 = new Grouping(0);
         grp1.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar").addHit(new com.yahoo.searchlib.aggregation.FS4Hit()))
+                .addChild(new com.yahoo.searchlib.aggregation.FS4Hit().addHit(new HitsAggregationResult(1, "bar")).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         Execution exec = newExecution(new GroupingExecutor(),
                                       new ResultProvider(Arrays.asList(
@@ -282,14 +280,11 @@ public class GroupingExecutorTestCase {
 
         Grouping grp0 = new Grouping(0);
         grp0.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                     .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                               .addAggregationResult(new HitsAggregationResult(1, "bar"))));
+                     .addChild(new HitsAggregationResult(1, "bar").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))));
         Grouping grp1 = new Grouping(0);
         grp1.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                     .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                                                                          .addAggregationResult(
-                                                                                  new HitsAggregationResult(1, "bar")
-                                                                                          .addHit(new com.yahoo.searchlib.aggregation.FS4Hit()))));
+                     .addChild(new com.yahoo.searchlib.aggregation.FS4Hit().addHit(new HitsAggregationResult(1, "bar")).addAggregationResult(
+                                     new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))));
         Execution exec = newExecution(new GroupingExecutor(),
                                       new ResultProvider(Arrays.asList(
                                               new GroupingListHit(Arrays.asList(grp0), null),
@@ -308,13 +303,11 @@ public class GroupingExecutorTestCase {
 
         Grouping grp = new Grouping(0);
         grp.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                    .addChild(new com.yahoo.searchlib.aggregation.Group()
-                                      .setId(new StringResultNode("foo"))
-                                      .addAggregationResult(new CountAggregationResult(1))
+                    .addChild(new CountAggregationResult(1).addAggregationResult(new com.yahoo.searchlib.aggregation.Group()
+                                      .setId(new StringResultNode("foo")))
                                       .addOrderBy(new AggregationRefNode(0), true))
-                    .addChild(new com.yahoo.searchlib.aggregation.Group()
-                                      .setId(new StringResultNode("bar"))
-                                      .addAggregationResult(new CountAggregationResult(2))
+                    .addChild(new CountAggregationResult(2).addAggregationResult(new com.yahoo.searchlib.aggregation.Group()
+                                      .setId(new StringResultNode("bar")))
                                       .addOrderBy(new AggregationRefNode(0), true)));
         Result res = newExecution(new GroupingExecutor(),
                                   new ResultProvider(Arrays.asList(
@@ -334,13 +327,11 @@ public class GroupingExecutorTestCase {
 
         Grouping grp0 = new Grouping(0);
         grp0.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar"))
+                .addChild(new HitsAggregationResult(1, "bar").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         Grouping grp1 = new Grouping(0);
         grp1.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar").addHit(new com.yahoo.searchlib.aggregation.FS4Hit()))
+                .addChild(new com.yahoo.searchlib.aggregation.FS4Hit().addHit(new HitsAggregationResult(1, "bar")).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
 
         ErrorProvider err = new ErrorProvider(1);
@@ -374,25 +365,21 @@ public class GroupingExecutorTestCase {
                                                           "                    each(output(summary(baz))) as(baz)))"));
         Grouping pass0A = new Grouping(0);
         pass0A.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar"))
+                .addChild(new HitsAggregationResult(1, "bar").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         Grouping pass0B = new Grouping(1);
         pass0B.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "baz"))
+                .addChild(new HitsAggregationResult(1, "baz").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         GlobalId gid1 = new GlobalId((new DocumentId("doc:test:1")).getGlobalId());
         GlobalId gid2 = new GlobalId((new DocumentId("doc:test:2")).getGlobalId());
         Grouping pass1A = new Grouping(0);
         pass1A.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar").addHit(new com.yahoo.searchlib.aggregation.FS4Hit(1, gid1, 3)))
+                .addChild(new com.yahoo.searchlib.aggregation.FS4Hit(1, gid1, 3).addHit(new HitsAggregationResult(1, "bar")).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         Grouping pass1B = new Grouping(1);
         pass1B.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "baz").addHit(new com.yahoo.searchlib.aggregation.FS4Hit(4, gid2, 6)))
+                .addChild(new com.yahoo.searchlib.aggregation.FS4Hit(4, gid2, 6).addHit(new HitsAggregationResult(1, "baz")).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         SummaryMapper sm = new SummaryMapper();
         Execution exec = newExecution(new GroupingExecutor(),
@@ -428,17 +415,14 @@ public class GroupingExecutorTestCase {
 
         Grouping pass0 = new Grouping(0);
         pass0.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                          .addChild(new com.yahoo.searchlib.aggregation.Group()
-                              .setId(new StringResultNode("foo"))
-                              .addAggregationResult(
-                                  new HitsAggregationResult(1, ExpressionConverter.DEFAULT_SUMMARY_NAME))));
+                          .addChild(new HitsAggregationResult(1, ExpressionConverter.DEFAULT_SUMMARY_NAME).addAggregationResult(
+                                  new com.yahoo.searchlib.aggregation.Group()
+                                      .setId(new StringResultNode("foo")))));
         Grouping pass1 = new Grouping(0);
         pass1.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                          .addChild(new com.yahoo.searchlib.aggregation.Group()
-                              .setId(new StringResultNode("foo"))
-                              .addAggregationResult(
-                                  new HitsAggregationResult(1, ExpressionConverter.DEFAULT_SUMMARY_NAME)
-                                      .addHit(new com.yahoo.searchlib.aggregation.FS4Hit()))));
+                          .addChild(new com.yahoo.searchlib.aggregation.FS4Hit().addHit(new HitsAggregationResult(1, ExpressionConverter.DEFAULT_SUMMARY_NAME)).addAggregationResult(
+                                          new com.yahoo.searchlib.aggregation.Group()
+                                              .setId(new StringResultNode("foo")))));
         Execution exec = newExecution(new GroupingExecutor(),
                                       new ResultProvider(Arrays.asList(
                                               new GroupingListHit(Arrays.asList(pass0), null),
@@ -459,16 +443,14 @@ public class GroupingExecutorTestCase {
 
         Grouping grp = new Grouping(0);
         grp.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar"))
+                .addChild(new HitsAggregationResult(1, "bar").addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         GroupingListHit pass0 = new GroupingListHit(Arrays.asList(grp), null);
 
         GlobalId gid = new GlobalId((new DocumentId("doc:test:1")).getGlobalId());
         grp = new Grouping(0);
         grp.setRoot(new com.yahoo.searchlib.aggregation.Group()
-                .addChild(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo"))
-                .addAggregationResult(new HitsAggregationResult(1, "bar").addHit(new com.yahoo.searchlib.aggregation.FS4Hit(4, gid, 6)))
+                .addChild(new com.yahoo.searchlib.aggregation.FS4Hit(4, gid, 6).addHit(new HitsAggregationResult(1, "bar")).addAggregationResult(new com.yahoo.searchlib.aggregation.Group().setId(new StringResultNode("foo")))
         ));
         GroupingListHit pass1 = new GroupingListHit(Arrays.asList(grp), null);
         Query queryB = newQuery(); /** required by {@link GroupingListHit#getSearchQuery()} */
diff --git a/container-search/src/test/java/com/yahoo/search/grouping/vespa/ResultBuilderTestCase.java b/container-search/src/test/java/com/yahoo/search/grouping/vespa/ResultBuilderTestCase.java
old mode 100644
new mode 100755
index e27003984d..6f80447e68
--- a/container-search/src/test/java/com/yahoo/search/grouping/vespa/ResultBuilderTestCase.java
+++ b/container-search/src/test/java/com/yahoo/search/grouping/vespa/ResultBuilderTestCase.java
@@ -86,36 +86,30 @@ public class ResultBuilderTestCase {
         Grouping grouping = new Grouping()
                 .setRoot(new Group()
                                  .setTag(1)
-                                 .addChild(new Group()
+                                 .addChild(new CountAggregationResult(10).setTag(3).addAggregationResult(new Group()
                                                    .setTag(2)
-                                                   .setId(new StringResultNode("foo"))
-                                                   .addAggregationResult(new CountAggregationResult(10).setTag(3))
-                                                   .addChild(new Group()
-                                                                     .setTag(4)
-                                                                     .setId(new StringResultNode("foo_a"))
-                                                                     .addAggregationResult(new CountAggregationResult(15)
-                                                                                                   .setTag(5)))
-                                                   .addChild(new Group()
-                                                                     .setTag(4)
-                                                                     .setId(new StringResultNode("foo_b"))
-                                                                     .addAggregationResult(new CountAggregationResult(16)
-                                                                                                   .setTag(5))))
-                                 .addChild(new Group()
+                                                   .setId(new StringResultNode("foo")))
+                                                   .addChild(new CountAggregationResult(15)
+                                                                                 .setTag(5).addAggregationResult(new Group()
+                                                                                                   .setTag(4)
+                                                                                                   .setId(new StringResultNode("foo_a"))))
+                                                   .addChild(new CountAggregationResult(16)
+                                                                                 .setTag(5).addAggregationResult(new Group()
+                                                                                                   .setTag(4)
+                                                                                                   .setId(new StringResultNode("foo_b")))))
+                                 .addChild(new CountAggregationResult(20).setTag(3).addAggregationResult(new Group()
                                                    .setTag(2)
-                                                   .setId(new StringResultNode("bar"))
-                                                   .addAggregationResult(new CountAggregationResult(20).setTag(3))
-                                                   .addChild(new Group()
-                                                                     .setTag(4)
-                                                                     .setId(new StringResultNode("bar_a"))
-                                                                     .addAggregationResult(
-                                                                             new CountAggregationResult(25)
-                                                                                     .setTag(5)))
-                                                   .addChild(new Group()
-                                                                     .setTag(4)
-                                                                     .setId(new StringResultNode("bar_b"))
-                                                                     .addAggregationResult(
-                                                                             new CountAggregationResult(26)
-                                                                                     .setTag(5)))));
+                                                   .setId(new StringResultNode("bar")))
+                                                   .addChild(new CountAggregationResult(25)
+                                                           .setTag(5).addAggregationResult(
+                                                                   new Group()
+                                                                                     .setTag(4)
+                                                                                     .setId(new StringResultNode("bar_a"))))
+                                                   .addChild(new CountAggregationResult(26)
+                                                           .setTag(5).addAggregationResult(
+                                                                   new Group()
+                                                                                     .setTag(4)
+                                                                                     .setId(new StringResultNode("bar_b"))))));
         assertLayout("all(group(artist) max(5) each(output(count() as(baz)) all(group(album) " +
                      "max(5) each(output(count() as(cox))) as(group_album))) as(group_artist))",
                      grouping,
@@ -232,10 +226,9 @@ public class ResultBuilderTestCase {
         Group root2 = newGroup(1, new ExpressionCountAggregationResult(new SparseSketch(), sketch -> 42).setTag(2));
         Grouping grouping2 = new Grouping().setRoot(root2);
         for (int i = 0; i < 3; ++i) {
-            root2.addChild(new Group()
+            new CountAggregationResult(i).setTag(3).addAggregationResult(root2.addChild(new Group()
                     .setTag(2)
-                    .setId(new StringResultNode("foo" + i)))
-                    .addAggregationResult(new CountAggregationResult(i).setTag(3));
+                    .setId(new StringResultNode("foo" + i))));
         }
 
         // Should return the number of groups when max is not present.
@@ -782,7 +775,7 @@ public class ResultBuilderTestCase {
             group.setId(new IntegerResultNode(id));
         }
         for (AggregationResult result : results) {
-            group.addAggregationResult(result);
+            result.addAggregationResult(group);
         }
         return group;
     }
@@ -805,7 +798,7 @@ public class ResultBuilderTestCase {
         res.setTag(hitsTag);
         res.setSummaryClass("default");
         for (int i = 0; i < numHits; ++i) {
-            res.addHit(new FS4Hit(i + 1, new GlobalId(IdString.createIdString("doc:scheme:")), 1));
+            new FS4Hit(i + 1, new GlobalId(IdString.createIdString("doc:scheme:")), 1).addHit(res);
         }
         return res;
     }
diff --git a/docproc/src/main/java/com/yahoo/docproc/Call.java b/docproc/src/main/java/com/yahoo/docproc/Call.java
old mode 100644
new mode 100755
index edde89cd01..bd1ea5392a
--- a/docproc/src/main/java/com/yahoo/docproc/Call.java
+++ b/docproc/src/main/java/com/yahoo/docproc/Call.java
@@ -4,7 +4,6 @@ package com.yahoo.docproc;
 import com.yahoo.component.ComponentId;
 import com.yahoo.docproc.jdisc.metric.NullMetric;
 import com.yahoo.docproc.proxy.ProxyDocument;
-import com.yahoo.docproc.proxy.ProxyDocumentUpdate;
 import com.yahoo.document.Document;
 import com.yahoo.document.DocumentOperation;
 import com.yahoo.document.DocumentPut;
@@ -106,16 +105,6 @@ public class Call implements Cloneable {
         return documentPut;
     }
 
-    /**
-     * The DocumentUpdate object a processor should work on. The one in args, or schema mapped.
-     *
-     * @return a DocumentUpdate
-     */
-    private DocumentUpdate configDocUpd(DocumentProcessor proc, DocumentUpdate docU) {
-        if (proc.getFieldMap().isEmpty()) return docU;
-        return new ProxyDocumentUpdate(docU, proc.getDocMap(docU.getDocumentType().getName()));
-    }
-
     private void schemaMapProcessing(Processing processing) {
         final List<DocumentOperation> documentOperations = processing.getDocumentOperations();
         for (int i = 0; i < documentOperations.size(); i++) {
@@ -123,7 +112,7 @@ public class Call implements Cloneable {
             if (op instanceof DocumentPut) {
                 documentOperations.set(i, configDoc(processor, (DocumentPut) op));
             } else if (op instanceof DocumentUpdate) {
-                documentOperations.set(i, configDocUpd(processor, (DocumentUpdate) op));
+                documentOperations.set(i, processor.configDocUpd((DocumentUpdate) op, this));
             }
         }
     }
diff --git a/docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java b/docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java
old mode 100644
new mode 100755
index a1b640d5eb..ecb02364bc
--- a/docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java
+++ b/docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java
@@ -153,33 +153,4 @@ public class DocprocExecutor {
         log.log(LogLevel.SPAM, message.toString());
     }
 
-    /**
-     * Processes a given Processing through the CallStack of this executor. Note that if a DocumentProcessor
-     * returns a LaterProgress for this processing, it will be re-processed (after waiting the specified delay given
-     * by the LaterProgress), until done or failed.
-     *
-     * @param processing the Processing to process. The CallStack of the Processing will be set to a clone of the CallStack of this executor, iff. it is currently null.
-     * @return a Progress; this is never a LaterProgress.
-     * @throws RuntimeException if a document processor throws an exception during processing, or this thread is interrupted while waiting.
-     * @see com.yahoo.docproc.Processing
-     * @see com.yahoo.docproc.DocumentProcessor.Progress
-     * @see com.yahoo.docproc.DocumentProcessor.LaterProgress
-     */
-    public DocumentProcessor.Progress processUntilDone(Processing processing) {
-        DocumentProcessor.Progress progress;
-        while (true) {
-            progress = process(processing);
-            if (!(progress instanceof DocumentProcessor.LaterProgress)) {
-                break;
-            }
-            DocumentProcessor.LaterProgress later = (DocumentProcessor.LaterProgress) progress;
-            try {
-                Thread.sleep(later.getDelay());
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
-                throw new RuntimeException(e);
-            }
-        }
-        return progress;
-    }
 }
diff --git a/docproc/src/main/java/com/yahoo/docproc/DocumentProcessor.java b/docproc/src/main/java/com/yahoo/docproc/DocumentProcessor.java
old mode 100644
new mode 100755
index d6b456056b..8afc3fc96b
--- a/docproc/src/main/java/com/yahoo/docproc/DocumentProcessor.java
+++ b/docproc/src/main/java/com/yahoo/docproc/DocumentProcessor.java
@@ -3,6 +3,8 @@ package com.yahoo.docproc;
 
 import com.yahoo.collections.Pair;
 import com.yahoo.component.chain.ChainedComponent;
+import com.yahoo.docproc.proxy.ProxyDocumentUpdate;
+import com.yahoo.document.DocumentUpdate;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -74,6 +76,18 @@ public abstract class DocumentProcessor extends ChainedComponent {
         return "processor " + getId().stringValue();
     }
 
+    /**
+     * The DocumentUpdate object a processor should work on. The one in args, or schema mapped.
+     *
+     * @return a DocumentUpdate
+     * @param docU
+     * @param call
+     */
+    public DocumentUpdate configDocUpd(DocumentUpdate docU, Call call) {
+        if (getFieldMap().isEmpty()) return docU;
+        return new ProxyDocumentUpdate(docU, getDocMap(docU.getDocumentType().getName()));
+    }
+
     /** An enumeration of possible results of calling a process method */
     public static class Progress {
 
diff --git a/docproc/src/main/java/com/yahoo/docproc/Processing.java b/docproc/src/main/java/com/yahoo/docproc/Processing.java
old mode 100644
new mode 100755
index e157ad0b09..00f42c6b79
--- a/docproc/src/main/java/com/yahoo/docproc/Processing.java
+++ b/docproc/src/main/java/com/yahoo/docproc/Processing.java
@@ -271,4 +271,34 @@ public class Processing {
         getNumDocsCalled = true;
         return getDocumentOperations().size();
     }
+
+    /**
+     * Processes a given Processing through the CallStack of this executor. Note that if a DocumentProcessor
+     * returns a LaterProgress for this processing, it will be re-processed (after waiting the specified delay given
+     * by the LaterProgress), until done or failed.
+     *
+     *
+     * @param docprocExecutor@return a Progress; this is never a LaterProgress.
+     * @throws RuntimeException if a document processor throws an exception during processing, or this thread is interrupted while waiting.
+     * @see Processing
+     * @see DocumentProcessor.Progress
+     * @see DocumentProcessor.LaterProgress
+     */
+    public DocumentProcessor.Progress processUntilDone(DocprocExecutor docprocExecutor) {
+        DocumentProcessor.Progress progress;
+        while (true) {
+            progress = docprocExecutor.process(this);
+            if (!(progress instanceof DocumentProcessor.LaterProgress)) {
+                break;
+            }
+            DocumentProcessor.LaterProgress later = (DocumentProcessor.LaterProgress) progress;
+            try {
+                Thread.sleep(later.getDelay());
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+                throw new RuntimeException(e);
+            }
+        }
+        return progress;
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/DataType.java b/document/src/main/java/com/yahoo/document/DataType.java
old mode 100644
new mode 100755
index fa5dffd042..52a37134af
--- a/document/src/main/java/com/yahoo/document/DataType.java
+++ b/document/src/main/java/com/yahoo/document/DataType.java
@@ -15,6 +15,9 @@ import com.yahoo.document.datatypes.Raw;
 import com.yahoo.document.datatypes.Float16FieldValue;
 import com.yahoo.document.datatypes.StringFieldValue;
 import com.yahoo.document.datatypes.UriFieldValue;
+import com.yahoo.document.serialization.DeserializationException;
+import com.yahoo.document.serialization.VespaDocumentDeserializer42;
+import com.yahoo.document.update.*;
 import com.yahoo.tensor.TensorType;
 import com.yahoo.vespa.objects.Identifiable;
 import com.yahoo.vespa.objects.Ids;
@@ -316,4 +319,62 @@ public abstract class DataType extends Identifiable implements Serializable, Com
     /** Returns whether this is a multivalue type, i.e either a CollectionDataType or a MapDataType */
     public boolean isMultivalue() { return false; }
 
+    public ValueUpdate getValueUpdate(DataType subType, VespaDocumentDeserializer42 vespaDocumentDeserializer42) {
+        int vuTypeId = vespaDocumentDeserializer42.getInt(null);
+
+        ValueUpdate.ValueUpdateClassID op = ValueUpdate.ValueUpdateClassID.getID(vuTypeId);
+        if (op == null) {
+            throw new IllegalArgumentException("Read type "+vuTypeId+" of bytebuffer, but this is not a legal value update type.");
+        }
+
+        switch (op) {
+            case ADD:
+            {
+                FieldValue fval = subType.createFieldValue();
+                fval.deserialize(vespaDocumentDeserializer42);
+                int weight = vespaDocumentDeserializer42.getInt(null);
+                return new AddValueUpdate(fval, weight);
+            }
+            case ARITHMETIC:
+                int opId = vespaDocumentDeserializer42.getInt(null);
+                ArithmeticValueUpdate.Operator operator = ArithmeticValueUpdate.Operator.getID(opId);
+                double operand = vespaDocumentDeserializer42.getDouble(null);
+                return new ArithmeticValueUpdate(operator, operand);
+            case ASSIGN:
+            {
+                byte contents = vespaDocumentDeserializer42.getByte(null);
+                FieldValue fval = null;
+                if (contents == (byte) 1) {
+                    fval = createFieldValue();
+                    fval.deserialize(vespaDocumentDeserializer42);
+                }
+                return new AssignValueUpdate(fval);
+            }
+            case CLEAR:
+                return new ClearValueUpdate();
+            case MAP:
+                if (this instanceof ArrayDataType) {
+                    CollectionDataType type = (CollectionDataType) this;
+                    IntegerFieldValue index = new IntegerFieldValue();
+                    index.deserialize(vespaDocumentDeserializer42);
+                    ValueUpdate update = type.getNestedType().getValueUpdate(null, vespaDocumentDeserializer42);
+                    return new MapValueUpdate(index, update);
+                } else if (this instanceof WeightedSetDataType) {
+                    CollectionDataType type = (CollectionDataType) this;
+                    FieldValue fval = type.getNestedType().createFieldValue();
+                    fval.deserialize(vespaDocumentDeserializer42);
+                    ValueUpdate update = INT.getValueUpdate(null, vespaDocumentDeserializer42);
+                    return new MapValueUpdate(fval, update);
+                } else {
+                    throw new DeserializationException("MapValueUpdate only works for arrays and weighted sets");
+                }
+            case REMOVE:
+                FieldValue fval = ((CollectionDataType) this).getNestedType().createFieldValue();
+                fval.deserialize(vespaDocumentDeserializer42);
+                return new RemoveValueUpdate(fval);
+            default:
+                throw new DeserializationException(
+                        "Could not deserialize ValueUpdate, unknown valueUpdateClassID type " + vuTypeId);
+        }
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/Document.java b/document/src/main/java/com/yahoo/document/Document.java
old mode 100644
new mode 100755
index cf0951fb03..82eb0b32a9
--- a/document/src/main/java/com/yahoo/document/Document.java
+++ b/document/src/main/java/com/yahoo/document/Document.java
@@ -402,4 +402,10 @@ public class Document extends StructuredFieldValue {
         return comp;
     }
 
+    public void verifyType(DocumentUpdate documentUpdate) {
+        if (!documentUpdate.getType().equals(getDataType())) {
+            throw new IllegalArgumentException(
+                    "Document " + getId() + " with type " + getDataType() + " must have same type as update, which is type " + documentUpdate.getType());
+        }
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/DocumentOperation.java b/document/src/main/java/com/yahoo/document/DocumentOperation.java
old mode 100644
new mode 100755
index 8209322c47..92db3b1ea2
--- a/document/src/main/java/com/yahoo/document/DocumentOperation.java
+++ b/document/src/main/java/com/yahoo/document/DocumentOperation.java
@@ -1,6 +1,8 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.document;
 
+import com.yahoo.document.select.rule.DocumentNode;
+
 /**
  * Base class for "document operations".
  * These include "put" (DocumentPut), "update" (DocumentUpdate), "remove" (DocumentRemove)
@@ -35,4 +37,21 @@ public abstract class DocumentOperation {
         this.condition = other.condition;
     }
 
+    public Object evaluate(DocumentNode documentNode) {
+        DocumentType doct;
+        if (this instanceof DocumentPut) {
+            doct = ((DocumentPut) this).getDocument().getDataType();
+        } else if (this instanceof DocumentUpdate) {
+            doct = ((DocumentUpdate) this).getDocumentType();
+        } else if (this instanceof DocumentRemove) {
+            DocumentRemove removeOp = (DocumentRemove) this;
+            return (removeOp.getId().getDocType().equals(documentNode.toString()) ? this : Boolean.FALSE);
+        } else if (this instanceof DocumentGet) {
+            DocumentGet getOp = (DocumentGet) this;
+            return (getOp.getId().getDocType().equals(documentNode.toString()) ? this : Boolean.FALSE);
+        } else {
+            throw new IllegalStateException("Document class '" + getClass().getName() + "' is not supported.");
+        }
+        return doct.isA(documentNode.toString()) ? this : Boolean.FALSE;
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/DocumentType.java b/document/src/main/java/com/yahoo/document/DocumentType.java
index 1aa1fed765..df5f495a34 100755
--- a/document/src/main/java/com/yahoo/document/DocumentType.java
+++ b/document/src/main/java/com/yahoo/document/DocumentType.java
@@ -499,4 +499,27 @@ public class DocumentType extends StructuredDataType {
         visitor.visit("bodytype", bodyType);
         visitor.visit("inherits", inherits);
     }
+
+    public void validateId(int newId, int version, Field field) {
+        if (newId >= 100 && newId <= 127) {
+            throw new IllegalArgumentException("Attempt to set the id of " + field + " to " + newId +
+                                               " failed, values from 100 to 127 " + "are reserved for internal use");
+        }
+
+        if ((newId & 0x80000000) != 0) // Highest bit must not be set
+        {
+            throw new IllegalArgumentException("Attempt to set the id of " + field + " to " + newId +
+                                               " failed, negative id values " + " are illegal");
+        }
+
+
+        if (this == null) return;
+        {
+            Field existing = getField(newId, version);
+            if (existing != null && !existing.getName().equals(field.getName())) {
+                throw new IllegalArgumentException("Couldn't set id of " + field + " to " + newId + ", " + existing +
+                                                   " already has this id in " + this);
+            }
+        }
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/DocumentTypeManager.java b/document/src/main/java/com/yahoo/document/DocumentTypeManager.java
old mode 100644
new mode 100755
index a3ba27b640..a63b2ea978
--- a/document/src/main/java/com/yahoo/document/DocumentTypeManager.java
+++ b/document/src/main/java/com/yahoo/document/DocumentTypeManager.java
@@ -8,6 +8,9 @@ import com.yahoo.document.annotation.AnnotationType;
 import com.yahoo.document.annotation.AnnotationTypeRegistry;
 import com.yahoo.document.annotation.AnnotationTypes;
 import com.yahoo.document.config.DocumentmanagerConfig;
+import com.yahoo.document.fieldset.FieldCollection;
+import com.yahoo.document.fieldset.FieldSet;
+import com.yahoo.document.fieldset.FieldSetRepo;
 import com.yahoo.document.serialization.DocumentDeserializer;
 import com.yahoo.document.serialization.DocumentDeserializerFactory;
 import com.yahoo.io.GrowableByteBuffer;
@@ -396,4 +399,25 @@ public class DocumentTypeManager {
     public void shutdown() {
         if (subscriber!=null) subscriber.close();
     }
+
+    public FieldSet parseFieldCollection(String docType, String fieldNames, FieldSetRepo fieldSetRepo) {
+        DocumentType type = getDocumentType(docType);
+        if (type == null) {
+         throw new IllegalArgumentException("Unknown document type " + docType);
+        }
+
+        StringTokenizer tokenizer = new StringTokenizer(fieldNames, ",");
+        FieldCollection collection = new FieldCollection(type);
+
+        for (; tokenizer.hasMoreTokens(); ) {
+            String token = tokenizer.nextToken();
+            Field f = type.getField(token);
+            if (f == null) {
+                throw new IllegalArgumentException("No such field " + token);
+            }
+            collection.add(f);
+        }
+
+        return collection;
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/DocumentUpdate.java b/document/src/main/java/com/yahoo/document/DocumentUpdate.java
old mode 100644
new mode 100755
index ef075662ee..0b70fc5ef8
--- a/document/src/main/java/com/yahoo/document/DocumentUpdate.java
+++ b/document/src/main/java/com/yahoo/document/DocumentUpdate.java
@@ -98,12 +98,6 @@ public class DocumentUpdate extends DocumentOperation implements Iterable<FieldP
         docId = id;
     }
 
-    private void verifyType(Document doc) {
-        if (!documentType.equals(doc.getDataType())) {
-            throw new IllegalArgumentException(
-                    "Document " + doc.getId() + " with type " + doc.getDataType() + " must have same type as update, which is type " + documentType);
-        }
-    }
     /**
      * Applies this document update.
      *
@@ -112,7 +106,7 @@ public class DocumentUpdate extends DocumentOperation implements Iterable<FieldP
      * @throws IllegalArgumentException if the document does not have the same document type as this update
      */
     public DocumentUpdate applyTo(Document doc) {
-        verifyType(doc);
+        doc.verifyType(this);
 
         for (FieldUpdate fieldUpdate : id2FieldUpdates.values()) {
             fieldUpdate.applyTo(doc);
@@ -130,7 +124,7 @@ public class DocumentUpdate extends DocumentOperation implements Iterable<FieldP
      * @throws IllegalArgumentException if the document does not have the same document type as this update
      */
     public DocumentUpdate prune(Document doc) {
-        verifyType(doc);
+        doc.verifyType(this);
 
         for (Iterator<Map.Entry<Integer, FieldUpdate>> iter = id2FieldUpdates.entrySet().iterator(); iter.hasNext();) {
             Map.Entry<Integer, FieldUpdate> entry = iter.next();
diff --git a/document/src/main/java/com/yahoo/document/Field.java b/document/src/main/java/com/yahoo/document/Field.java
old mode 100644
new mode 100755
index d0a19a5007..1213609f76
--- a/document/src/main/java/com/yahoo/document/Field.java
+++ b/document/src/main/java/com/yahoo/document/Field.java
@@ -40,7 +40,7 @@ public class Field extends FieldBase implements FieldSet, Comparable, Serializab
         this.dataType = dataType;
         this.isHeader = isHeader;
         this.forcedId = true;
-        validateId(id, null, Document.SERIALIZED_VERSION);
+        null.validateId(id, Document.SERIALIZED_VERSION, this);
     }
 
     public Field(String name) {
@@ -106,7 +106,7 @@ public class Field extends FieldBase implements FieldSet, Comparable, Serializab
     private int calculateIdV6(DocumentType owner) {
         int newId = BobHash.hash(getName()); // Using a portfriendly hash
         if (newId < 0) newId = -newId; // Highest bit is reserved to tell 7-bit id's from 31-bit ones
-        validateId(newId, owner, 6);
+        owner.validateId(newId, 6, this);
         return newId;
     }
 
@@ -127,7 +127,7 @@ public class Field extends FieldBase implements FieldSet, Comparable, Serializab
 
         int newId = BobHash.hash(combined); // Using a portfriendly hash
         if (newId < 0) newId = -newId; // Highest bit is reserved to tell 7-bit id's from 31-bit ones
-        validateId(newId, owner, Document.SERIALIZED_VERSION);
+        owner.validateId(newId, Document.SERIALIZED_VERSION, this);
         return newId;
     }
 
@@ -144,7 +144,7 @@ public class Field extends FieldBase implements FieldSet, Comparable, Serializab
             throw new NullPointerException("Can not assign an id of " + this + " without knowing the owner");
         }
 
-        validateId(newId, owner, Document.SERIALIZED_VERSION);
+        owner.validateId(newId, Document.SERIALIZED_VERSION, this);
 
         owner.removeField(getName());
         this.fieldId = newId;
@@ -153,29 +153,6 @@ public class Field extends FieldBase implements FieldSet, Comparable, Serializab
         owner.addField(this);
     }
 
-    private void validateId(int newId, DocumentType owner, int version) {
-        if (newId >= 100 && newId <= 127) {
-            throw new IllegalArgumentException("Attempt to set the id of " + this + " to " + newId +
-                                               " failed, values from 100 to 127 " + "are reserved for internal use");
-        }
-
-        if ((newId & 0x80000000) != 0) // Highest bit must not be set
-        {
-            throw new IllegalArgumentException("Attempt to set the id of " + this + " to " + newId +
-                                               " failed, negative id values " + " are illegal");
-        }
-
-
-        if (owner == null) return;
-        {
-            Field existing = owner.getField(newId, version);
-            if (existing != null && !existing.getName().equals(getName())) {
-                throw new IllegalArgumentException("Couldn't set id of " + this + " to " + newId + ", " + existing +
-                                                   " already has this id in " + owner);
-            }
-        }
-    }
-
     /** Returns the datatype of the field */
     public final DataType getDataType() {
         return dataType;
diff --git a/document/src/main/java/com/yahoo/document/annotation/AlternateSpanList.java b/document/src/main/java/com/yahoo/document/annotation/AlternateSpanList.java
old mode 100644
new mode 100755
index bfac5c2c62..31cc29d69f
--- a/document/src/main/java/com/yahoo/document/annotation/AlternateSpanList.java
+++ b/document/src/main/java/com/yahoo/document/annotation/AlternateSpanList.java
@@ -566,7 +566,7 @@ public class AlternateSpanList extends SpanList {
      * @param node span node
      */
     public AlternateSpanList add(int i, SpanNode node) {
-        checkValidity(node, children(i));
+        node.checkValidity(children(i), AlternateSpanList.this);
         node.setParent(this);
         children(i).add(node);
         return this;
diff --git a/document/src/main/java/com/yahoo/document/annotation/Annotation.java b/document/src/main/java/com/yahoo/document/annotation/Annotation.java
old mode 100644
new mode 100755
index 4b9452f340..4e8f90856e
--- a/document/src/main/java/com/yahoo/document/annotation/Annotation.java
+++ b/document/src/main/java/com/yahoo/document/annotation/Annotation.java
@@ -256,5 +256,20 @@ public class Annotation implements Comparable<Annotation> {
 
         return comp;
     }
+
+    /**
+     * Adds an Annotation to the internal list of annotations for this SpanTree.&nbsp;Use this when
+     * adding an Annotation that shall annotate a SpanNode. Upon return, Annotation.getSpanNode()
+     * returns the given node.
+     *
+     * @param node the node to annotate
+     * @param spanTree
+     * @return this, for chaining
+     * @see Annotation
+     */
+    public SpanTree annotate(SpanNode node, SpanTree spanTree) {
+        setSpanNode(node);
+        return spanTree.annotate(this);
+    }
 }
 
diff --git a/document/src/main/java/com/yahoo/document/annotation/SpanList.java b/document/src/main/java/com/yahoo/document/annotation/SpanList.java
old mode 100644
new mode 100755
index 5afe4678c5..65e9733b25
--- a/document/src/main/java/com/yahoo/document/annotation/SpanList.java
+++ b/document/src/main/java/com/yahoo/document/annotation/SpanList.java
@@ -56,19 +56,6 @@ public class SpanList extends SpanNode {
         }
     }
 
-    void checkValidity(SpanNode node, List<SpanNode> childrenToCheck) {
-        if (!node.isValid()) {
-            throw new IllegalStateException("Cannot reuse SpanNode instance " + node + ", is INVALID.");
-        }
-        if (node.getParent() != null) {
-            if (node.getParent() != this) {
-                throw new IllegalStateException(node + " is already a child of " + node.getParent() + ", cannot be added to " + this);
-            } else if (node.getParent() == this && childrenToCheck.contains(node)) {
-                throw new IllegalStateException(node + " is already a child of " + this + ", cannot be added twice to the same parent node.");
-            }
-        }
-    }
-
     /**
      * Adds a child node to this SpanList.
      *
@@ -77,7 +64,7 @@ public class SpanList extends SpanNode {
      * @throws IllegalStateException if SpanNode.isValid() returns false.
      */
     public SpanList add(SpanNode node) {
-        checkValidity(node, children());
+        node.checkValidity(children(), this);
         node.setParent(this);
         resetCachedFromAndTo();
         children().add(node);
diff --git a/document/src/main/java/com/yahoo/document/annotation/SpanNode.java b/document/src/main/java/com/yahoo/document/annotation/SpanNode.java
old mode 100644
new mode 100755
index e1a7b11d2e..24a714262f
--- a/document/src/main/java/com/yahoo/document/annotation/SpanNode.java
+++ b/document/src/main/java/com/yahoo/document/annotation/SpanNode.java
@@ -84,14 +84,14 @@ public abstract class SpanNode implements Comparable<SpanNode>, SpanNodeParent {
 
     /**
      * Convenience method for adding an annotation to this span, same as
-     * <code>getSpanTree().{@link SpanTree#annotate(SpanNode,Annotation) spanTree.annotate(this,annotation)}</code>
+     * <code>getSpanTree().{@link Annotation#annotate(SpanNode, SpanTree) spanTree.annotate(this,annotation)}</code>
      *
      * @param annotation the annotation to add
      * @return this for chaining
      * @throws NullPointerException if this span is not attached to a tree
      */
     public SpanNode annotate(Annotation annotation) {
-        getNonNullSpanTree().annotate(this, annotation);
+        annotation.annotate(this, getNonNullSpanTree());
         return this;
     }
 
@@ -317,4 +317,17 @@ public abstract class SpanNode implements Comparable<SpanNode>, SpanNodeParent {
         //both from and to are equal
         return 0;
     }
+
+    public void checkValidity(List<SpanNode> childrenToCheck, SpanList spanList) {
+        if (!isValid()) {
+            throw new IllegalStateException("Cannot reuse SpanNode instance " + this + ", is INVALID.");
+        }
+        if (getParent() != null) {
+            if (getParent() != spanList) {
+                throw new IllegalStateException(this + " is already a child of " + getParent() + ", cannot be added to " + spanList);
+            } else if (getParent() == spanList && childrenToCheck.contains(this)) {
+                throw new IllegalStateException(this + " is already a child of " + spanList + ", cannot be added twice to the same parent node.");
+            }
+        }
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/annotation/SpanTree.java b/document/src/main/java/com/yahoo/document/annotation/SpanTree.java
old mode 100644
new mode 100755
index 2206d95aa3..3b8ad316d1
--- a/document/src/main/java/com/yahoo/document/annotation/SpanTree.java
+++ b/document/src/main/java/com/yahoo/document/annotation/SpanTree.java
@@ -437,21 +437,6 @@ public class SpanTree implements Iterable<Annotation>, SpanNodeParent, Comparabl
         return this;
     }
 
-    /**
-     * Adds an Annotation to the internal list of annotations for this SpanTree.&nbsp;Use this when
-     * adding an Annotation that shall annotate a SpanNode. Upon return, Annotation.getSpanNode()
-     * returns the given node.
-     *
-     * @param node the node to annotate
-     * @param annotation the Annotation to add
-     * @return this, for chaining
-     * @see com.yahoo.document.annotation.Annotation
-     */
-    public SpanTree annotate(SpanNode node, Annotation annotation) {
-        annotation.setSpanNode(node);
-        return annotate(annotation);
-    }
-
     /**
      * Adds an Annotation to the internal list of annotations for this SpanTree.&nbsp;Use this when
      * adding an Annotation that shall annotate a SpanNode. Upon return, Annotation.getSpanNode()
@@ -479,7 +464,7 @@ public class SpanTree implements Iterable<Annotation>, SpanNodeParent, Comparabl
      * @see com.yahoo.document.annotation.Annotation
      */
     public SpanTree annotate(SpanNode node, AnnotationType type,FieldValue value) {
-        return annotate(node, new Annotation(type, value));
+        return new Annotation(type, value).annotate(node, this);
     }
 
     /**
@@ -497,7 +482,7 @@ public class SpanTree implements Iterable<Annotation>, SpanNodeParent, Comparabl
      */
     public SpanTree annotate(SpanNode node, AnnotationType type) {
         Annotation a = new Annotation(type);
-        return annotate(node, a);
+        return a.annotate(node, this);
     }
 
     /**
diff --git a/document/src/main/java/com/yahoo/document/datatypes/Struct.java b/document/src/main/java/com/yahoo/document/datatypes/Struct.java
old mode 100644
new mode 100755
index fc75870bb9..3fa3051ca6
--- a/document/src/main/java/com/yahoo/document/datatypes/Struct.java
+++ b/document/src/main/java/com/yahoo/document/datatypes/Struct.java
@@ -194,18 +194,6 @@ public class Struct extends StructuredFieldValue {
         }
     }
 
-    /**
-     * Clears this and assigns from the given {@link StructuredFieldValue}
-     */
-    public void assignFrom(StructuredFieldValue sfv) {
-        clear();
-        Iterator<Map.Entry<Field,FieldValue>> otherValues = sfv.iterator();
-        while (otherValues.hasNext()) {
-            Map.Entry<Field, FieldValue> otherEntry = otherValues.next();
-            setFieldValue(otherEntry.getKey(), otherEntry.getValue());
-        }
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/document/src/main/java/com/yahoo/document/datatypes/StructuredFieldValue.java b/document/src/main/java/com/yahoo/document/datatypes/StructuredFieldValue.java
old mode 100644
new mode 100755
index b3ea93d846..8afd71cb99
--- a/document/src/main/java/com/yahoo/document/datatypes/StructuredFieldValue.java
+++ b/document/src/main/java/com/yahoo/document/datatypes/StructuredFieldValue.java
@@ -232,4 +232,16 @@ public abstract class StructuredFieldValue extends CompositeFieldValue {
         return false;
     }
 
+    /**
+     * Clears this and assigns from the given {@link StructuredFieldValue}
+     * @param struct
+     */
+    public void assignFrom(Struct struct) {
+        struct.clear();
+        Iterator<Map.Entry<Field,FieldValue>> otherValues = iterator();
+        while (otherValues.hasNext()) {
+            Map.Entry<Field, FieldValue> otherEntry = otherValues.next();
+            setFieldValue(otherEntry.getKey(), otherEntry.getValue());
+        }
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/fieldpathupdate/FieldPathUpdate.java b/document/src/main/java/com/yahoo/document/fieldpathupdate/FieldPathUpdate.java
old mode 100644
new mode 100755
index d4144116a0..724eff4d90
--- a/document/src/main/java/com/yahoo/document/fieldpathupdate/FieldPathUpdate.java
+++ b/document/src/main/java/com/yahoo/document/fieldpathupdate/FieldPathUpdate.java
@@ -19,6 +19,12 @@ import java.util.ListIterator;
  */
 public abstract class FieldPathUpdate {
 
+    public void write(VespaDocumentSerializer6 vespaDocumentSerializer6) {
+        vespaDocumentSerializer6.putByte(null, (byte) getUpdateType().getCode());
+        vespaDocumentSerializer6.put(null, getOriginalFieldPath());
+        vespaDocumentSerializer6.put(null, getOriginalWhereClause());
+    }
+
     public enum Type {
         ASSIGN(0),
         REMOVE(1),
@@ -131,7 +137,7 @@ public abstract class FieldPathUpdate {
     }
 
     public void serialize(VespaDocumentSerializer6 data) {
-        data.write(this);
+        write(data);
     }
 
     public static FieldPathUpdate create(Type type, DocumentType docType, DocumentUpdateReader reader) {
diff --git a/document/src/main/java/com/yahoo/document/fieldset/FieldSetRepo.java b/document/src/main/java/com/yahoo/document/fieldset/FieldSetRepo.java
old mode 100644
new mode 100755
index a703543990..078e2a4d29
--- a/document/src/main/java/com/yahoo/document/fieldset/FieldSetRepo.java
+++ b/document/src/main/java/com/yahoo/document/fieldset/FieldSetRepo.java
@@ -2,7 +2,6 @@
 package com.yahoo.document.fieldset;
 
 import com.yahoo.document.Document;
-import com.yahoo.document.DocumentType;
 import com.yahoo.document.DocumentTypeManager;
 import com.yahoo.document.Field;
 import com.yahoo.document.datatypes.FieldValue;
@@ -31,27 +30,6 @@ public class FieldSetRepo {
         }
     }
 
-    FieldSet parseFieldCollection(DocumentTypeManager docMan, String docType, String fieldNames) {
-        DocumentType type = docMan.getDocumentType(docType);
-        if (type == null) {
-         throw new IllegalArgumentException("Unknown document type " + docType);
-        }
-
-        StringTokenizer tokenizer = new StringTokenizer(fieldNames, ",");
-        FieldCollection collection = new FieldCollection(type);
-
-        for (; tokenizer.hasMoreTokens(); ) {
-            String token = tokenizer.nextToken();
-            Field f = type.getField(token);
-            if (f == null) {
-                throw new IllegalArgumentException("No such field " + token);
-            }
-            collection.add(f);
-        }
-
-        return collection;
-    }
-
     public FieldSet parse(DocumentTypeManager docMan, String fieldSet) {
         if (fieldSet.length() == 0) {
             throw new IllegalArgumentException("Illegal field set value \"\"");
@@ -71,7 +49,7 @@ public class FieldSetRepo {
         String type = tokenizer.nextToken();
         String fields = tokenizer.nextToken();
 
-        return parseFieldCollection(docMan, type, fields);
+        return docMan.parseFieldCollection(type, fields, this);
     }
 
     @SuppressWarnings("deprecation")
diff --git a/document/src/main/java/com/yahoo/document/json/TokenBuffer.java b/document/src/main/java/com/yahoo/document/json/TokenBuffer.java
old mode 100644
new mode 100755
index e20845bfa5..f8a77654bf
--- a/document/src/main/java/com/yahoo/document/json/TokenBuffer.java
+++ b/document/src/main/java/com/yahoo/document/json/TokenBuffer.java
@@ -9,6 +9,10 @@ import java.util.Iterator;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonToken;
 import com.google.common.base.Preconditions;
+import com.yahoo.document.DocumentPut;
+import com.yahoo.document.json.readers.VespaJsonDocumentReader;
+
+import static com.yahoo.document.json.readers.CompositeReader.populateComposite;
 
 /**
  * Helper class to enable lookahead in the token stream.
@@ -17,6 +21,17 @@ import com.google.common.base.Preconditions;
  */
 public class TokenBuffer {
 
+    // Exposed for unit testing...
+    public void readPut(DocumentPut put, VespaJsonDocumentReader vespaJsonDocumentReader) {
+        try {
+            if (isEmpty()) // no "fields" map
+                throw new IllegalArgumentException(put + " is missing a 'fields' map");
+            populateComposite(this, put.getDocument());
+        } catch (JsonReaderException e) {
+            throw JsonReaderException.addDocId(e, put.getId());
+        }
+    }
+
     public static final class Token {
         public final JsonToken token;
         public final String name;
diff --git a/document/src/main/java/com/yahoo/document/json/readers/VespaJsonDocumentReader.java b/document/src/main/java/com/yahoo/document/json/readers/VespaJsonDocumentReader.java
old mode 100644
new mode 100755
index e252e71407..afa8c916c9
--- a/document/src/main/java/com/yahoo/document/json/readers/VespaJsonDocumentReader.java
+++ b/document/src/main/java/com/yahoo/document/json/readers/VespaJsonDocumentReader.java
@@ -22,7 +22,6 @@ import com.yahoo.document.update.FieldUpdate;
 
 import static com.yahoo.document.json.readers.AddRemoveCreator.createAdds;
 import static com.yahoo.document.json.readers.AddRemoveCreator.createRemoves;
-import static com.yahoo.document.json.readers.CompositeReader.populateComposite;
 import static com.yahoo.document.json.readers.JsonParserHelpers.expectObjectEnd;
 import static com.yahoo.document.json.readers.JsonParserHelpers.expectObjectStart;
 import static com.yahoo.document.json.readers.JsonParserHelpers.expectScalarValue;
@@ -50,7 +49,7 @@ public class VespaJsonDocumentReader {
             switch (documentParseInfo.operationType) {
                 case PUT:
                     documentOperation = new DocumentPut(new Document(documentType, documentParseInfo.documentId));
-                    readPut(documentParseInfo.fieldsBuffer, (DocumentPut) documentOperation);
+                    documentParseInfo.fieldsBuffer.readPut((DocumentPut) documentOperation, this);
                     verifyEndState(documentParseInfo.fieldsBuffer, JsonToken.END_OBJECT);
                     break;
                 case REMOVE:
@@ -77,17 +76,6 @@ public class VespaJsonDocumentReader {
         return documentOperation;
     }
 
-    // Exposed for unit testing...
-    public void readPut(TokenBuffer buffer, DocumentPut put) {
-        try {
-            if (buffer.isEmpty()) // no "fields" map
-                throw new IllegalArgumentException(put + " is missing a 'fields' map");
-            populateComposite(buffer, put.getDocument());
-        } catch (JsonReaderException e) {
-            throw JsonReaderException.addDocId(e, put.getId());
-        }
-    }
-
     // Exposed for unit testing...
     public void readUpdate(TokenBuffer buffer, DocumentUpdate update) {
         if (buffer.isEmpty())
diff --git a/document/src/main/java/com/yahoo/document/select/OrderingSpecification.java b/document/src/main/java/com/yahoo/document/select/OrderingSpecification.java
old mode 100644
new mode 100755
index 97908d3190..65d2f9964d
--- a/document/src/main/java/com/yahoo/document/select/OrderingSpecification.java
+++ b/document/src/main/java/com/yahoo/document/select/OrderingSpecification.java
@@ -1,6 +1,8 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.document.select;
 
+import com.yahoo.document.select.rule.LogicNode;
+
 public class OrderingSpecification {
     public static int ASCENDING = 0;
     public static int DESCENDING = 1;
@@ -46,4 +48,16 @@ public class OrderingSpecification {
     public String toString() {
         return "O: " + order + " S:" + orderingStart + " W:" + widthBits + " D:" + divisionBits;
     }
+
+    public OrderingSpecification pickOrdering(OrderingSpecification b, boolean isAnd, LogicNode logicNode) {
+        if (getWidthBits() == b.getWidthBits() && getDivisionBits() == b.getDivisionBits() && getOrder() == b.getOrder()) {
+            if ((getOrder() == ASCENDING && isAnd) ||
+                (getOrder() == DESCENDING && !isAnd)) {
+                return new OrderingSpecification(getOrder(), Math.max(getOrderingStart(), b.getOrderingStart()), b.getWidthBits(), getDivisionBits());
+            } else {
+                return new OrderingSpecification(getOrder(), Math.min(getOrderingStart(), b.getOrderingStart()), b.getWidthBits(), getDivisionBits());
+            }
+        }
+        return null;
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/select/rule/ComparisonNode.java b/document/src/main/java/com/yahoo/document/select/rule/ComparisonNode.java
old mode 100644
new mode 100755
index 13a990566e..0d04d0245e
--- a/document/src/main/java/com/yahoo/document/select/rule/ComparisonNode.java
+++ b/document/src/main/java/com/yahoo/document/select/rule/ComparisonNode.java
@@ -96,41 +96,11 @@ public class ComparisonNode implements ExpressionNode {
         return this;
     }
 
-    public OrderingSpecification getOrdering(IdNode lhs, LiteralNode rhs, String operator, int order) {
-        if (lhs.getWidthBits() == -1 || lhs.getDivisionBits() == -1 || !(rhs.getValue() instanceof Long)) {
-            return null;
-        }
-
-        if (operator.equals("==") || operator.equals("=")) {
-            return new OrderingSpecification(order, (Long)rhs.getValue(), lhs.getWidthBits(), lhs.getDivisionBits());
-        } 
-
-        if (order == OrderingSpecification.ASCENDING) {
-            if ((operator.equals("<") || operator.equals("<="))) {
-                return new OrderingSpecification(order, 0, lhs.getWidthBits(), lhs.getDivisionBits());
-            } 
-            if (operator.equals(">")) {
-                return new OrderingSpecification(order, (Long)rhs.getValue() + 1, lhs.getWidthBits(), lhs.getDivisionBits());
-            }
-            if (operator.equals(">=")) {
-                return new OrderingSpecification(order, (Long)rhs.getValue(), lhs.getWidthBits(), lhs.getDivisionBits());
-            }
-        } else {
-            if (operator.equals("<")) {
-                return new OrderingSpecification(order, (Long)rhs.getValue() - 1, lhs.getWidthBits(), lhs.getDivisionBits());
-            }
-            if (operator.equals("<=")) {
-                return new OrderingSpecification(order, (Long)rhs.getValue(), lhs.getWidthBits(), lhs.getDivisionBits());
-            }
-        }
-        return null;
-    }
-
     public OrderingSpecification getOrdering(int order) {
         if (lhs instanceof IdNode && rhs instanceof LiteralNode) {
-            return getOrdering((IdNode)lhs, (LiteralNode)rhs, operator, order);
+            return ((IdNode)lhs).getOrderingOther((LiteralNode)rhs, operator, order, this);
         } else if (rhs instanceof IdNode && lhs instanceof LiteralNode) {
-            return getOrdering((IdNode)rhs, (LiteralNode)rhs, operator, order);
+            return ((IdNode)rhs).getOrderingOther((LiteralNode)rhs, operator, order, this);
         }
 
         return null;
diff --git a/document/src/main/java/com/yahoo/document/select/rule/DocumentNode.java b/document/src/main/java/com/yahoo/document/select/rule/DocumentNode.java
old mode 100644
new mode 100755
index c0907693da..bf3b530067
--- a/document/src/main/java/com/yahoo/document/select/rule/DocumentNode.java
+++ b/document/src/main/java/com/yahoo/document/select/rule/DocumentNode.java
@@ -34,25 +34,7 @@ public class DocumentNode implements ExpressionNode {
 
     @Override
     public Object evaluate(Context context) {
-        return evaluate(context.getDocumentOperation());
-    }
-
-    public Object evaluate(DocumentOperation op) {
-        DocumentType doct;
-        if (op instanceof DocumentPut) {
-            doct = ((DocumentPut)op).getDocument().getDataType();
-        } else if (op instanceof DocumentUpdate) {
-            doct = ((DocumentUpdate)op).getDocumentType();
-        } else if (op instanceof DocumentRemove) {
-            DocumentRemove removeOp = (DocumentRemove)op;
-            return (removeOp.getId().getDocType().equals(type) ? op : Boolean.FALSE);
-        } else if (op instanceof DocumentGet) {
-            DocumentGet getOp = (DocumentGet)op;
-            return (getOp.getId().getDocType().equals(type) ? op : Boolean.FALSE);
-        } else {
-            throw new IllegalStateException("Document class '" + op.getClass().getName() + "' is not supported.");
-        }
-        return doct.isA(this.type) ? op : Boolean.FALSE;
+        return context.getDocumentOperation().evaluate(this);
     }
 
     public void accept(Visitor visitor) {
diff --git a/document/src/main/java/com/yahoo/document/select/rule/IdNode.java b/document/src/main/java/com/yahoo/document/select/rule/IdNode.java
old mode 100644
new mode 100755
index 3c15a2866c..1ae3100f9f
--- a/document/src/main/java/com/yahoo/document/select/rule/IdNode.java
+++ b/document/src/main/java/com/yahoo/document/select/rule/IdNode.java
@@ -105,4 +105,34 @@ public class IdNode implements ExpressionNode {
     public String toString() {
         return "id" + (field != null ? "." + field : "") + (widthBits != -1 ? "(" + widthBits + "," + divisionBits + ")" : "");
     }
+
+    public OrderingSpecification getOrderingOther(LiteralNode rhs, String operator, int order, ComparisonNode comparisonNode) {
+        if (getWidthBits() == -1 || getDivisionBits() == -1 || !(rhs.getValue() instanceof Long)) {
+            return null;
+        }
+
+        if (operator.equals("==") || operator.equals("=")) {
+            return new OrderingSpecification(order, (Long)rhs.getValue(), getWidthBits(), getDivisionBits());
+        }
+
+        if (order == OrderingSpecification.ASCENDING) {
+            if ((operator.equals("<") || operator.equals("<="))) {
+                return new OrderingSpecification(order, 0, getWidthBits(), getDivisionBits());
+            }
+            if (operator.equals(">")) {
+                return new OrderingSpecification(order, (Long)rhs.getValue() + 1, getWidthBits(), getDivisionBits());
+            }
+            if (operator.equals(">=")) {
+                return new OrderingSpecification(order, (Long)rhs.getValue(), getWidthBits(), getDivisionBits());
+            }
+        } else {
+            if (operator.equals("<")) {
+                return new OrderingSpecification(order, (Long)rhs.getValue() - 1, getWidthBits(), getDivisionBits());
+            }
+            if (operator.equals("<=")) {
+                return new OrderingSpecification(order, (Long)rhs.getValue(), getWidthBits(), getDivisionBits());
+            }
+        }
+        return null;
+    }
 }
diff --git a/document/src/main/java/com/yahoo/document/select/rule/LogicNode.java b/document/src/main/java/com/yahoo/document/select/rule/LogicNode.java
old mode 100644
new mode 100755
index a7b112fac7..bd00fd5a2d
--- a/document/src/main/java/com/yahoo/document/select/rule/LogicNode.java
+++ b/document/src/main/java/com/yahoo/document/select/rule/LogicNode.java
@@ -88,18 +88,6 @@ public class LogicNode implements ExpressionNode {
         return buf.pop().ordering;
     }
 
-    private OrderingSpecification pickOrdering(OrderingSpecification a, OrderingSpecification b, boolean isAnd) {
-        if (a.getWidthBits() == b.getWidthBits() && a.getDivisionBits() == b.getDivisionBits() && a.getOrder() == b.getOrder()) {
-            if ((a.getOrder() == OrderingSpecification.ASCENDING && isAnd) ||
-                (a.getOrder() == OrderingSpecification.DESCENDING && !isAnd)) {
-                return new OrderingSpecification(a.getOrder(), Math.max(a.getOrderingStart(), b.getOrderingStart()), b.getWidthBits(), a.getDivisionBits());
-            } else {
-                return new OrderingSpecification(a.getOrder(), Math.min(a.getOrderingStart(), b.getOrderingStart()), b.getWidthBits(), a.getDivisionBits());
-            }
-        }
-        return null;
-    }
-
     private void pickOrdering(Stack<OrderingItem> buf) {
         OrderingItem rhs = buf.pop();
         OrderingItem lhs = buf.pop();
@@ -110,12 +98,12 @@ public class LogicNode implements ExpressionNode {
             } else if (rhs.ordering == null) {
                 // empty
             } else {
-                lhs.ordering = pickOrdering(lhs.ordering, rhs.ordering, true);
+                lhs.ordering = lhs.ordering.pickOrdering(rhs.ordering, true, this);
             }
             break;
         case OR:
             if (lhs.ordering != null && rhs.ordering != null) {
-                lhs.ordering = pickOrdering(lhs.ordering, rhs.ordering, false);
+                lhs.ordering = lhs.ordering.pickOrdering(rhs.ordering, false, this);
             } else {
                 lhs.ordering = null;
             }
diff --git a/document/src/main/java/com/yahoo/document/serialization/VespaDocumentDeserializer42.java b/document/src/main/java/com/yahoo/document/serialization/VespaDocumentDeserializer42.java
old mode 100644
new mode 100755
index 7ec4433a24..43edebb968
--- a/document/src/main/java/com/yahoo/document/serialization/VespaDocumentDeserializer42.java
+++ b/document/src/main/java/com/yahoo/document/serialization/VespaDocumentDeserializer42.java
@@ -50,14 +50,7 @@ import com.yahoo.document.fieldpathupdate.FieldPathUpdate;
 import com.yahoo.document.fieldpathupdate.RemoveFieldPathUpdate;
 import com.yahoo.document.predicate.BinaryFormat;
 import com.yahoo.document.select.parser.ParseException;
-import com.yahoo.document.update.AddValueUpdate;
-import com.yahoo.document.update.ArithmeticValueUpdate;
-import com.yahoo.document.update.AssignValueUpdate;
-import com.yahoo.document.update.ClearValueUpdate;
 import com.yahoo.document.update.FieldUpdate;
-import com.yahoo.document.update.MapValueUpdate;
-import com.yahoo.document.update.RemoveValueUpdate;
-import com.yahoo.document.update.ValueUpdate;
 import com.yahoo.io.GrowableByteBuffer;
 import com.yahoo.tensor.serialization.TypedBinaryFormat;
 import com.yahoo.text.Utf8;
@@ -616,65 +609,6 @@ public class VespaDocumentDeserializer42 extends BufferSerializer implements Doc
         update.setNewValues((Array)fv);
     }
 
-    public ValueUpdate getValueUpdate(DataType superType, DataType subType) {
-        int vuTypeId = getInt(null);
-
-        ValueUpdate.ValueUpdateClassID op = ValueUpdate.ValueUpdateClassID.getID(vuTypeId);
-        if (op == null) {
-            throw new IllegalArgumentException("Read type "+vuTypeId+" of bytebuffer, but this is not a legal value update type.");
-        }
-
-        switch (op) {
-            case ADD:
-            {
-                FieldValue fval = subType.createFieldValue();
-                fval.deserialize(this);
-                int weight = getInt(null);
-                return new AddValueUpdate(fval, weight);
-            }
-            case ARITHMETIC:
-                int opId = getInt(null);
-                ArithmeticValueUpdate.Operator operator = ArithmeticValueUpdate.Operator.getID(opId);
-                double operand = getDouble(null);
-                return new ArithmeticValueUpdate(operator, operand);
-            case ASSIGN:
-            {
-                byte contents = getByte(null);
-                FieldValue fval = null;
-                if (contents == (byte) 1) {
-                    fval = superType.createFieldValue();
-                    fval.deserialize(this);
-                }
-                return new AssignValueUpdate(fval);
-            }
-            case CLEAR:
-                return new ClearValueUpdate();
-            case MAP:
-                if (superType instanceof ArrayDataType) {
-                    CollectionDataType type = (CollectionDataType) superType;
-                    IntegerFieldValue index = new IntegerFieldValue();
-                    index.deserialize(this);
-                    ValueUpdate update = getValueUpdate(type.getNestedType(), null);
-                    return new MapValueUpdate(index, update);
-                } else if (superType instanceof WeightedSetDataType) {
-                    CollectionDataType type = (CollectionDataType) superType;
-                    FieldValue fval = type.getNestedType().createFieldValue();
-                    fval.deserialize(this);
-                    ValueUpdate update = getValueUpdate(DataType.INT, null);
-                    return new MapValueUpdate(fval, update);
-                } else {
-                    throw new DeserializationException("MapValueUpdate only works for arrays and weighted sets");
-                }
-            case REMOVE:
-                FieldValue fval = ((CollectionDataType) superType).getNestedType().createFieldValue();
-                fval.deserialize(this);
-                return new RemoveValueUpdate(fval);
-            default:
-                throw new DeserializationException(
-                        "Could not deserialize ValueUpdate, unknown valueUpdateClassID type " + vuTypeId);
-        }
-    }
-
     public void read(FieldUpdate fieldUpdate) {
         int fieldId = getInt(null);
         Field field = fieldUpdate.getDocumentType().getField(fieldId, fieldUpdate.getSerializationVersion());
@@ -689,9 +623,9 @@ public class VespaDocumentDeserializer42 extends BufferSerializer implements Doc
         for (int i = 0; i < size; i++) {
             if (field.getDataType() instanceof CollectionDataType) {
                 CollectionDataType collType = (CollectionDataType) field.getDataType();
-                fieldUpdate.addValueUpdate(getValueUpdate(collType, collType.getNestedType()));
+                fieldUpdate.addValueUpdate(collType.getValueUpdate(collType.getNestedType(), this));
             } else {
-                fieldUpdate.addValueUpdate(getValueUpdate(field.getDataType(), null));
+                fieldUpdate.addValueUpdate(field.getDataType().getValueUpdate(null, this));
             }
         }
     }
diff --git a/document/src/main/java/com/yahoo/document/serialization/VespaDocumentSerializer6.java b/document/src/main/java/com/yahoo/document/serialization/VespaDocumentSerializer6.java
old mode 100644
new mode 100755
index 8f033c8463..99424fda8d
--- a/document/src/main/java/com/yahoo/document/serialization/VespaDocumentSerializer6.java
+++ b/document/src/main/java/com/yahoo/document/serialization/VespaDocumentSerializer6.java
@@ -595,14 +595,8 @@ public class VespaDocumentSerializer6 extends BufferSerializer implements Docume
         }
     }
 
-    public void write(FieldPathUpdate update) {
-        putByte(null, (byte)update.getUpdateType().getCode());
-        put(null, update.getOriginalFieldPath());
-        put(null, update.getOriginalWhereClause());
-    }
-
     public void write(AssignFieldPathUpdate update) {
-        write((FieldPathUpdate)update);
+        ((FieldPathUpdate)update).write(this);
         byte flags = 0;
         if (update.getRemoveIfZero()) {
             flags |= AssignFieldPathUpdate.REMOVE_IF_ZERO;
@@ -621,7 +615,7 @@ public class VespaDocumentSerializer6 extends BufferSerializer implements Docume
     }
 
     public void write(AddFieldPathUpdate update) {
-        write((FieldPathUpdate)update);
+        ((FieldPathUpdate)update).write(this);
         update.getNewValues().serialize(this);
     }
 
diff --git a/document/src/test/java/com/yahoo/document/DocumentTypeManagerTestCase.java b/document/src/test/java/com/yahoo/document/DocumentTypeManagerTestCase.java
old mode 100644
new mode 100755
index 65c217e09e..c9410458e0
--- a/document/src/test/java/com/yahoo/document/DocumentTypeManagerTestCase.java
+++ b/document/src/test/java/com/yahoo/document/DocumentTypeManagerTestCase.java
@@ -449,7 +449,7 @@ search annotationsimplicitstruct {
             value.setFieldValue("x", 10);
             SpanNode span = new Span(0, text.length());
             SpanTree tree = new SpanTree("span", span);
-            tree.annotate(span, new Annotation(type, value));
+            new Annotation(type, value).annotate(span, tree);
             sfv.setSpanTree(tree);
         }
 
@@ -461,7 +461,7 @@ search annotationsimplicitstruct {
             value.setFieldValue("x", 10);
             SpanNode span = new Span(0, text.length());
             SpanTree tree = new SpanTree("span", span);
-            tree.annotate(span, new Annotation(type, value));
+            new Annotation(type, value).annotate(span, tree);
             sfv.setSpanTree(tree);
         }
     }
diff --git a/document/src/test/java/com/yahoo/document/annotation/AbstractTypesTest.java b/document/src/test/java/com/yahoo/document/annotation/AbstractTypesTest.java
index 5899256437..14e73b966c 100755
--- a/document/src/test/java/com/yahoo/document/annotation/AbstractTypesTest.java
+++ b/document/src/test/java/com/yahoo/document/annotation/AbstractTypesTest.java
@@ -90,23 +90,23 @@ public abstract class AbstractTypesTest {
             alternateSpanList.add(s4);
 
             tree.annotate(s2, dummy);
-            tree.annotate(s2, new Annotation(number, new IntegerFieldValue(1234)));
+            new Annotation(number, new IntegerFieldValue(1234)).annotate(s2, tree);
 
             Struct mother = new Struct(person);
             mother.setFieldValue("firstname", "jenny");
             mother.setFieldValue("lastname", "olsen");
             mother.setFieldValue("birthyear", 1909);
             Annotation motherA = new Annotation(personA, mother);
-            tree.annotate(s2, motherA);
+            motherA.annotate(s2, tree);
 
             Struct daughter = new Struct(relative);
             daughter.setFieldValue("title", "daughter");
             daughter.setFieldValue("related", new AnnotationReference(personReference, motherA));
-            tree.annotate(s6, new Annotation(relativeA, daughter));
+            new Annotation(relativeA, daughter).annotate(s6, tree);
 
             tree.annotate(s1, dummy);
             tree.annotate(s3, dummy);
-            tree.annotate(s3, new Annotation(number, new IntegerFieldValue(2344)));
+            new Annotation(number, new IntegerFieldValue(2344)).annotate(s3, tree);
             tree.annotate(s5, dummy);
 
             List<SpanNode> alternateChildren = new ArrayList<>();
diff --git a/document/src/test/java/com/yahoo/document/annotation/AlternateSpanListAdvTestCase.java b/document/src/test/java/com/yahoo/document/annotation/AlternateSpanListAdvTestCase.java
old mode 100644
new mode 100755
index 146f458b6e..0066d76c77
--- a/document/src/test/java/com/yahoo/document/annotation/AlternateSpanListAdvTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/AlternateSpanListAdvTestCase.java
@@ -82,13 +82,13 @@ public class AlternateSpanListAdvTestCase {
         alternate2.add(span22);
         alternate2.add(span33);
 
-        tree.annotate(span1, an1);
-        tree.annotate(span2, an2);
-        tree.annotate(span3, an3);
+        an1.annotate(span1, tree);
+        an2.annotate(span2, tree);
+        an3.annotate(span3, tree);
 
-        tree.annotate(span11, an11);
-        tree.annotate(span22, an22);
-        tree.annotate(span33, an33);
+        an11.annotate(span11, tree);
+        an22.annotate(span22, tree);
+        an33.annotate(span33, tree);
 
         subtreeList1 = new ArrayList<SpanNode>();
         subtreeList1.add(alternate1);
@@ -110,7 +110,7 @@ public class AlternateSpanListAdvTestCase {
     @Test (expected = IllegalStateException.class)
     public void assertSharingAnnotationInstance() {
         SpanNode testNode = new Span(0, 2);
-        tree.annotate(testNode, an1);
+        an1.annotate(testNode, tree);
     }
 
     @Test (expected = IllegalStateException.class)
diff --git a/document/src/test/java/com/yahoo/document/annotation/AnnotationTestCase.java b/document/src/test/java/com/yahoo/document/annotation/AnnotationTestCase.java
old mode 100644
new mode 100755
index cb04ca1de6..c95d7f117f
--- a/document/src/test/java/com/yahoo/document/annotation/AnnotationTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/AnnotationTestCase.java
@@ -86,8 +86,8 @@ public class AnnotationTestCase extends AbstractTypesTest {
             SpanList root = new SpanList();
             tree = new SpanTree("SpanTree1", root);
             SpanNode node = new Span(0, 3);
-            tree.annotate(node, new Annotation(type1, new StringFieldValue("text")));
-            tree.annotate(node, new Annotation(type2, new IntegerFieldValue(1)));
+            new Annotation(type1, new StringFieldValue("text")).annotate(node, tree);
+            new Annotation(type2, new IntegerFieldValue(1)).annotate(node, tree);
             root.add(node);
             output.setSpanTree(tree);
         }
diff --git a/document/src/test/java/com/yahoo/document/annotation/Bug4155865TestCase.java b/document/src/test/java/com/yahoo/document/annotation/Bug4155865TestCase.java
old mode 100644
new mode 100755
index 8c885a33d8..f34d2207f0
--- a/document/src/test/java/com/yahoo/document/annotation/Bug4155865TestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/Bug4155865TestCase.java
@@ -89,8 +89,8 @@ public class Bug4155865TestCase {
 
         SpanNode spn2 = new Span(1, 4);
         SpanNode spn3 = new Span(6, 10);
-        tree.annotate(spn2, an111);
-        tree.annotate(spn3, an222);
+        an111.annotate(spn2, tree);
+        an222.annotate(spn3, tree);
 
         List<SpanNode> stList = new ArrayList<SpanNode>();
         stList.add(spn2);
@@ -117,13 +117,13 @@ public class Bug4155865TestCase {
         alternate1.add(span22);
         alternate1.add(span33);
 
-        tree.annotate(span1, an1);
-        tree.annotate(span2, an2);
-        tree.annotate(span3, an3);
+        an1.annotate(span1, tree);
+        an2.annotate(span2, tree);
+        an3.annotate(span3, tree);
 
-        tree.annotate(span11, an11);
-        tree.annotate(span22, an22);
-        tree.annotate(span33, an33);
+        an11.annotate(span11, tree);
+        an22.annotate(span22, tree);
+        an33.annotate(span33, tree);
 
         List<SpanNode> subtreeList1 = new ArrayList<SpanNode>();
         subtreeList1.add(alternate1);
diff --git a/document/src/test/java/com/yahoo/document/annotation/Bug4259784TestCase.java b/document/src/test/java/com/yahoo/document/annotation/Bug4259784TestCase.java
old mode 100644
new mode 100755
index 0a7739fd8c..2784124546
--- a/document/src/test/java/com/yahoo/document/annotation/Bug4259784TestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/Bug4259784TestCase.java
@@ -72,35 +72,35 @@ public class Bug4259784TestCase {
 	    Struct personValue = (Struct) person.getDataType().createFieldValue();
 	    personValue.setFieldValue("name", "Richard Bair");
 	    Annotation personAn = new Annotation(person, personValue);
-	    tree.annotate(span1, personAn);
+	    personAn.annotate(span1, tree);
 
 		Struct companyValue = (Struct) company.getDataType().createFieldValue();
 		companyValue.setFieldValue("name", "Sun");
         Annotation compAn = new Annotation(company, companyValue);
-        tree.annotate(span2, compAn);
+        compAn.annotate(span2, tree);
 
         Struct locationVal = new Struct(manager.getDataType("annotation.location"));
 		locationVal.setFieldValue("lat", 37.774929);
 		locationVal.setFieldValue("lon", -122.419415);
         Annotation locAnnotation = new Annotation(location, locationVal);
-        tree.annotate(span3, locAnnotation);
+        locAnnotation.annotate(span3, tree);
 
 
         Struct dirValue1 = new Struct(manager.getDataType("annotation.person"));
         dirValue1.setFieldValue("name", "Jonathan Schwartz");
         Annotation dirAnnotation1 = new Annotation(person, dirValue1);
-        tree.annotate(span5, dirAnnotation1);
+        dirAnnotation1.annotate(span5, tree);
 
         Struct dirValue2 = new Struct(manager.getDataType("annotation.person"));
         dirValue2.setFieldValue("name", "Scott Mcnealy");
         Annotation dirAnnotation2 = new Annotation(person, dirValue2);
-        tree.annotate(span6, dirAnnotation2);
+        dirAnnotation2.annotate(span6, tree);
 
 
         Struct indValue = new Struct(manager.getDataType("annotation.industry"));
         indValue.setFieldValue("vertical", "Manufacturing");
         Annotation indAn = new Annotation(industry, indValue);
-        tree.annotate(span4, indAn);
+        indAn.annotate(span4, tree);
 
 
         Field compLocField = ((StructDataType) company.getDataType()).getField("place");
diff --git a/document/src/test/java/com/yahoo/document/annotation/Bug4261985TestCase.java b/document/src/test/java/com/yahoo/document/annotation/Bug4261985TestCase.java
old mode 100644
new mode 100755
index a3b33d4b91..ce686c2980
--- a/document/src/test/java/com/yahoo/document/annotation/Bug4261985TestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/Bug4261985TestCase.java
@@ -83,7 +83,7 @@ public class Bug4261985TestCase {
 	    Struct personValue = (Struct) person.getDataType().createFieldValue();
 	    personValue.setFieldValue("name", "Richard Bair");
 	    Annotation personAn = new Annotation(person, personValue);
-	    tree.annotate(span1, personAn);
+	    personAn.annotate(span1, tree);
 
 		Struct companyValue = (Struct) company.getDataType().createFieldValue();
 		companyValue.setFieldValue("name", "Sun");
@@ -117,7 +117,7 @@ public class Bug4261985TestCase {
 		dirFieldVal.add(new AnnotationReference(annRefType, dirAnnotation2));
 		companyValue.setFieldValue(dirField, dirFieldVal);
 		Annotation compAn = new Annotation(company, companyValue);
-		tree.annotate(span2, compAn);
+		compAn.annotate(span2, tree);
 
 		Struct bigshotsValue = (Struct) bigshots.getDataType().createFieldValue();
 		Field ceosField = ((StructDataType) bigshots.getDataType()).getField("ceos");
@@ -127,23 +127,23 @@ public class Bug4261985TestCase {
 		bigshotsValue.setFieldValue(ceosField, ceosFieldVal);
 
 		Annotation bigshotsAn = new Annotation(bigshots, bigshotsValue);
-		tree.annotate(span8, bigshotsAn);
+		bigshotsAn.annotate(span8, tree);
 
 		Field selfField = ((StructDataType) bigshots.getDataType()).getField("self");
 		AnnotationReferenceDataType annType2 = (AnnotationReferenceDataType) selfField.getDataType();
 		FieldValue selfFieldVal = new AnnotationReference(annType2, bigshotsAn);
 		bigshotsValue.setFieldValue(selfField, selfFieldVal);
 		bigshotsAn = new Annotation(bigshots, bigshotsValue);
-		tree.annotate(span8, bigshotsAn);
+		bigshotsAn.annotate(span8, tree);
 
-	    tree.annotate(span3, locAnnotation);
-        tree.annotate(span5, dirAnnotation1);
-        tree.annotate(span6, dirAnnotation2);
+	    locAnnotation.annotate(span3, tree);
+        dirAnnotation1.annotate(span5, tree);
+        dirAnnotation2.annotate(span6, tree);
 
 		Struct indValue = new Struct(manager.getDataType("annotation.industry"));
 		indValue.setFieldValue("vertical", "Manufacturing");
 		Annotation indAn = new Annotation(industry, indValue);
-		tree.annotate(span4, indAn);
+		indAn.annotate(span4, tree);
 
         StringFieldValue body = (StringFieldValue) document.getFieldValue(document.getDataType().getField("body"));
 		body.setSpanTree(tree);
diff --git a/document/src/test/java/com/yahoo/document/annotation/Bug4475379TestCase.java b/document/src/test/java/com/yahoo/document/annotation/Bug4475379TestCase.java
index 0291e23c88..a95b20fb2c 100755
--- a/document/src/test/java/com/yahoo/document/annotation/Bug4475379TestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/Bug4475379TestCase.java
@@ -125,15 +125,15 @@ public class Bug4475379TestCase {
         alternate2.add(span22);
         alternate2.add(span33);
 
-        tree.annotate(span1, compAn1);
-        tree.annotate(span2, personAn1);
-        tree.annotate(span3, locAn1);
-        tree.annotate(span1, indAn1);
-
-        tree.annotate(span11, compAn2);
-        tree.annotate(span22, personAn2);
-        tree.annotate(span33, locAn2);
-        tree.annotate(span11, indAn2);
+        compAn1.annotate(span1, tree);
+        personAn1.annotate(span2, tree);
+        locAn1.annotate(span3, tree);
+        indAn1.annotate(span1, tree);
+
+        compAn2.annotate(span11, tree);
+        personAn2.annotate(span22, tree);
+        locAn2.annotate(span33, tree);
+        indAn2.annotate(span11, tree);
 
         List<SpanNode> subtreeList1 = new ArrayList<>();
         subtreeList1.add(alternate1);
diff --git a/document/src/test/java/com/yahoo/document/annotation/Bug6425939TestCase.java b/document/src/test/java/com/yahoo/document/annotation/Bug6425939TestCase.java
old mode 100644
new mode 100755
index 82b730ae4c..8cfec03369
--- a/document/src/test/java/com/yahoo/document/annotation/Bug6425939TestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/Bug6425939TestCase.java
@@ -59,7 +59,7 @@ public class Bug6425939TestCase {
         Struct ps = new Struct(person);
         ps.setFieldValue("foo", "epic badger");
         ps.setFieldValue("bar", 54321);
-        tree.annotate(node, new Annotation(personA, ps));
+        new Annotation(personA, ps).annotate(node, tree);
         root.add(node);
         return tree;
     }
diff --git a/document/src/test/java/com/yahoo/document/annotation/DocTestCase.java b/document/src/test/java/com/yahoo/document/annotation/DocTestCase.java
old mode 100644
new mode 100755
index e117a51069..c985a1f36b
--- a/document/src/test/java/com/yahoo/document/annotation/DocTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/DocTestCase.java
@@ -201,7 +201,7 @@ public class DocTestCase {
             Span span2 = new Span(55, 13);
             textNode.add(span1)
                     .add(span2);
-            tree.annotate(span2, city)
+            city.annotate(span2, tree)
                     .annotate(textNode, textType);
         }
 
@@ -280,9 +280,8 @@ public class DocTestCase {
                     .add(span2)
                     .add(span3)
                     .add(span4);
-            tree.annotate(span1, beginTag)
-                    .annotate(span2, textType)
-                    .annotate(span3, sanAnnotation)
+            sanAnnotation.annotate(span3, tree.annotate(span1, beginTag)
+                    .annotate(span2, textType))
                     .annotate(span4, endTag)
                     .annotate(paragraph, paragraphType);
         }
@@ -296,8 +295,7 @@ public class DocTestCase {
                     .add(span2)
                     .add(span3);
 
-            tree.annotate(span1, beginTag)
-                    .annotate(span2, franciscoAnnotation)
+            franciscoAnnotation.annotate(span2, tree.annotate(span1, beginTag))
                     .annotate(span3, endTag)
                     .annotate(root, bodyType)
                     .annotate(city);
diff --git a/document/src/test/java/com/yahoo/document/annotation/SpanNodeAdvTestCase.java b/document/src/test/java/com/yahoo/document/annotation/SpanNodeAdvTestCase.java
old mode 100644
new mode 100755
index d181549a75..5a147bb8d3
--- a/document/src/test/java/com/yahoo/document/annotation/SpanNodeAdvTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/SpanNodeAdvTestCase.java
@@ -65,7 +65,7 @@ public class SpanNodeAdvTestCase {
 
         tree.annotate(span1, at1).annotate(span2, at2).annotate(span3, at3);
         tree.annotate(span11, at1).annotate(span22, at2).annotate(span33, at3);
-        tree.annotate(span111, an111).annotate(span222, at2).annotate(span333, at3).annotate(span333, at1);
+        an111.annotate(span111, tree).annotate(span222, at2).annotate(span333, at3).annotate(span333, at1);
         tree.annotate(span222, at2);
 
         root.add(span3);
diff --git a/document/src/test/java/com/yahoo/document/annotation/SpanNodeTestCase.java b/document/src/test/java/com/yahoo/document/annotation/SpanNodeTestCase.java
old mode 100644
new mode 100755
index 8e9978c845..03bed3bd88
--- a/document/src/test/java/com/yahoo/document/annotation/SpanNodeTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/SpanNodeTestCase.java
@@ -290,11 +290,11 @@ public class SpanNodeTestCase {
         Annotation detr = new Annotation(detType);
         Annotation noun = new Annotation(nounType);
 
-        tree.annotate(span, word);
-        tree.annotate(span, bgtg);
-        tree.annotate(span, cpwd);
-        tree.annotate(span, detr);
-        tree.annotate(span, noun);
+        word.annotate(span, tree);
+        bgtg.annotate(span, tree);
+        cpwd.annotate(span, tree);
+        detr.annotate(span, tree);
+        noun.annotate(span, tree);
 
 
         {
diff --git a/document/src/test/java/com/yahoo/document/annotation/SpanTreeAdvTest.java b/document/src/test/java/com/yahoo/document/annotation/SpanTreeAdvTest.java
old mode 100644
new mode 100755
index 852835ab8c..131c5be3e9
--- a/document/src/test/java/com/yahoo/document/annotation/SpanTreeAdvTest.java
+++ b/document/src/test/java/com/yahoo/document/annotation/SpanTreeAdvTest.java
@@ -65,7 +65,7 @@ public class SpanTreeAdvTest {
 
         tree.annotate(span1, at1).annotate(span2, at2).annotate(span3, at3);
         tree.annotate(span11, at1).annotate(span22, at2).annotate(span33, at3);
-        tree.annotate(span111, an111).annotate(span222, at2).annotate(span333, at3).annotate(span333, at1);
+        an111.annotate(span111, tree).annotate(span222, at2).annotate(span333, at3).annotate(span333, at1);
         tree.annotate(span222, at2);
 
         root.add(span3);
@@ -102,7 +102,7 @@ public class SpanTreeAdvTest {
     @Test (expected = IllegalStateException.class)
     public void assertSharingAnnotationInstance() {
         populateSpanTree();
-        tree.annotate(span333, an111);
+        an111.annotate(span333, tree);
     }
 
 
@@ -199,7 +199,7 @@ public class SpanTreeAdvTest {
     public void assertReuseRemovedNode() {
         populateSpanTree();
         root.remove(span3);
-        tree.annotate(span3, new Annotation(at1));
+        new Annotation(at1).annotate(span3, tree);
     }
 
     @Test (expected = IllegalStateException.class)
diff --git a/document/src/test/java/com/yahoo/document/annotation/SpanTreeTestCase.java b/document/src/test/java/com/yahoo/document/annotation/SpanTreeTestCase.java
index b200e72514..e31a6c9c71 100755
--- a/document/src/test/java/com/yahoo/document/annotation/SpanTreeTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/SpanTreeTestCase.java
@@ -71,7 +71,7 @@ public class SpanTreeTestCase extends AbstractTypesTest {
         dummyD = new Annotation(dummy);
         dummyE = new Annotation(dummy);
 
-        tree.annotate(a, dummyA)
+        dummyA.annotate(a, tree)
                 .annotate(b, numberB)
                 .annotate(c, bananaC)
                 .annotate(c, appleC)
@@ -378,7 +378,7 @@ public class SpanTreeTestCase extends AbstractTypesTest {
 
 
         Annotation dummyAnnotationForB = new Annotation(dummy);
-        tree.annotate(b, dummyAnnotationForB);
+        dummyAnnotationForB.annotate(b, tree);
 
         AnnotationReference referenceToDummyB = new AnnotationReference(refTypeToDummy, dummyAnnotationForB);
         Annotation annotationWithRefToDummyB = new Annotation(annotationTypeWithRefToDummy, referenceToDummyB);
@@ -530,9 +530,9 @@ public class SpanTreeTestCase extends AbstractTypesTest {
         string.setSpanTree(tree);
 
         Annotation a1 = new Annotation(grape);
-        tree.annotate(span1, a1);
+        a1.annotate(span1, tree);
         Annotation a2 = new Annotation(apple);
-        tree.annotate(span2, a2);
+        a2.annotate(span2, tree);
 
         StringFieldValue stringCopy = string.clone();
 
@@ -593,16 +593,16 @@ public class SpanTreeTestCase extends AbstractTypesTest {
         string.setSpanTree(tree);
 
         Annotation a1 = new Annotation(grape);
-        tree.annotate(span1, a1);
+        a1.annotate(span1, tree);
         Annotation a2 = new Annotation(apple);
-        tree.annotate(span2, a2);
+        a2.annotate(span2, tree);
 
         Struct donald = new Struct(person);
         donald.setFieldValue("firstname", "donald");
         donald.setFieldValue("lastname", "duck");
         donald.setFieldValue("birthyear", 1929);
         Annotation donaldAnn = new Annotation(personA, donald);
-        tree.annotate(list, donaldAnn);
+        donaldAnn.annotate(list, tree);
 
 
         StringFieldValue stringCopy = string.clone();
@@ -848,8 +848,8 @@ public class SpanTreeTestCase extends AbstractTypesTest {
         root.add(endTagSpan);
 
         //annotate spans:
-        tree.annotate(beginTagSpan, beginTag);
-        tree.annotate(endTagSpan, endTag);
+        beginTag.annotate(beginTagSpan, tree);
+        endTag.annotate(endTagSpan, tree);
 
 
         //none of the below statements should lead to a StackOverflowError:
diff --git a/document/src/test/java/com/yahoo/document/annotation/SystemTestCase.java b/document/src/test/java/com/yahoo/document/annotation/SystemTestCase.java
index 9163b773bc..15e44fb91c 100755
--- a/document/src/test/java/com/yahoo/document/annotation/SystemTestCase.java
+++ b/document/src/test/java/com/yahoo/document/annotation/SystemTestCase.java
@@ -45,24 +45,24 @@ public class SystemTestCase {
         Struct personValue = new Struct(manager.getDataType("annotation.person"));
         personValue.setFieldValue("name", "george washington");
         Annotation person = new Annotation(personType, personValue);
-        tree.annotate(personSpan, person);
+        person.annotate(personSpan, tree);
 
         Struct artistValue = new Struct(manager.getDataType("annotation.artist"));
         artistValue.setFieldValue("name", "elvis presley");
         artistValue.setFieldValue("instrument", 20);
         Annotation artist = new Annotation(artistType, artistValue);
-        tree.annotate(artistSpan, artist);
+        artist.annotate(artistSpan, tree);
 
         Struct dateValue = new Struct(manager.getDataType("annotation.date"));
         dateValue.setFieldValue("exacttime", 123456789L);
         Annotation date = new Annotation(dateType, dateValue);
-        tree.annotate(dateSpan, date);
+        date.annotate(dateSpan, tree);
 
         Struct placeValue = new Struct(manager.getDataType("annotation.place"));
         placeValue.setFieldValue("lat", 1467L);
         placeValue.setFieldValue("lon", 789L);
         Annotation place = new Annotation(placeType, placeValue);
-        tree.annotate(placeSpan, place);
+        place.annotate(placeSpan, tree);
 
         Struct eventValue = new Struct(manager.getDataType("annotation.event"));
         eventValue.setFieldValue("description", "Big concert");
@@ -70,7 +70,7 @@ public class SystemTestCase {
         eventValue.setFieldValue("date", new AnnotationReference((AnnotationReferenceDataType) manager.getDataType("annotationreference<date>"), date));
         eventValue.setFieldValue("place", new AnnotationReference((AnnotationReferenceDataType) manager.getDataType("annotationreference<place>"), place));
         Annotation event = new Annotation(eventType, eventValue);
-        tree.annotate(root, event);
+        event.annotate(root, tree);
 
         StringFieldValue content = new StringFieldValue("This is the story of a big concert by Elvis and a special guest appearance by George Washington");
         content.setSpanTree(tree);
diff --git a/document/src/test/java/com/yahoo/document/datatypes/StringTestCase.java b/document/src/test/java/com/yahoo/document/datatypes/StringTestCase.java
old mode 100644
new mode 100755
index 296ab1ac3f..a539b314e2
--- a/document/src/test/java/com/yahoo/document/datatypes/StringTestCase.java
+++ b/document/src/test/java/com/yahoo/document/datatypes/StringTestCase.java
@@ -172,7 +172,7 @@ public class StringTestCase extends AbstractTypesTest {
 
         StringFieldValue innerString = new StringFieldValue("innerBalloooo");
 
-        outerTree.annotate(outerSpan, new Annotation(type, innerString));
+        new Annotation(type, innerString).annotate(outerSpan, outerTree);
 
         SpanTree innerTree = new SpanTree("inner");
         innerString.setSpanTree(innerTree);
@@ -180,7 +180,7 @@ public class StringTestCase extends AbstractTypesTest {
         SpanList innerRoot = (SpanList)innerTree.getRoot();
         Span innerSpan = new Span(0, 1);
         innerRoot.add(innerSpan);
-        innerTree.annotate(innerSpan, new Annotation(type));
+        new Annotation(type).annotate(innerSpan, innerTree);
 
         GrowableByteBuffer buffer = new GrowableByteBuffer(1024);
         DocumentSerializer serializer = DocumentSerializerFactory.create6(buffer);
@@ -254,22 +254,22 @@ public class StringTestCase extends AbstractTypesTest {
         companyValue.setFieldValue("lon", new DoubleFieldValue(-122.44));
         companyValue.setFieldValue("vertical", new StringFieldValue("software"));
         Annotation compAn = new Annotation(company, companyValue);
-        tree.annotate(companySpan, compAn);
+        compAn.annotate(companySpan, tree);
 
         Struct personValue = new Struct(manager.getDataType("annotation.person"));
         personValue.setFieldValue("name", new StringFieldValue("Richard Bair"));
         Annotation personAn = new Annotation(person, personValue);
-        tree.annotate(personSpan, personAn);
+        personAn.annotate(personSpan, tree);
 
         Struct locValue = new Struct(manager.getDataType("annotation.location"));
         locValue.setFieldValue("name", new StringFieldValue("Prinsens Gate"));
         Annotation loc = new Annotation(location, locValue);
-        tree.annotate(locationSpan, loc);
+        loc.annotate(locationSpan, tree);
 
         Struct locValue2 = new Struct(manager.getDataType("annotation.location"));
         locValue2.setFieldValue("name", new StringFieldValue("Kongens Gate"));
         Annotation locAn = new Annotation(location, locValue2);
-        tree.annotate(locationSpan, locAn);
+        locAn.annotate(locationSpan, tree);
 
         SpanList branch = new SpanList();
 
@@ -284,17 +284,17 @@ public class StringTestCase extends AbstractTypesTest {
         Struct industryValue = new Struct(manager.getDataType("annotation.industry"));
         industryValue.setFieldValue("vertical", new StringFieldValue("Manufacturing"));
         Annotation ind = new Annotation(industry, industryValue);
-        tree.annotate(span1, ind);
+        ind.annotate(span1, tree);
 
         Struct pValue = new Struct(manager.getDataType("annotation.person"));
         pValue.setFieldValue("name", new StringFieldValue("Praveen Mohan"));
         Annotation pAn = new Annotation(person, pValue);
-        tree.annotate(span2, pAn);
+        pAn.annotate(span2, tree);
 
         Struct lValue = new Struct(manager.getDataType("annotation.location"));
         lValue.setFieldValue("name", new StringFieldValue("Embassy Golf Links"));
         Annotation locn = new Annotation(location, lValue);
-        tree.annotate(span3, locn);
+        locn.annotate(span3, tree);
 
         Struct cValue = (Struct)company.getDataType().createFieldValue();
         cValue.setFieldValue("name", new StringFieldValue("Yahoo"));
@@ -303,12 +303,12 @@ public class StringTestCase extends AbstractTypesTest {
         cValue.setFieldValue("lon", new DoubleFieldValue(-42.44));
         cValue.setFieldValue("vertical", new StringFieldValue("search"));
         Annotation cAn = new Annotation(company, cValue);
-        tree.annotate(branch, cAn);
+        cAn.annotate(branch, tree);
 
         Struct pVal = new Struct(manager.getDataType("annotation.person"));
         pVal.setFieldValue("name", new StringFieldValue("Kim Omar"));
         Annotation an = new Annotation(person, pVal);
-        tree.annotate(root, an);
+        an.annotate(root, tree);
         root.add(branch);
 
         StringFieldValue body = (StringFieldValue)document.getFieldValue(document.getDataType().getField("body"));
diff --git a/document/src/test/java/com/yahoo/document/json/JsonReaderTestCase.java b/document/src/test/java/com/yahoo/document/json/JsonReaderTestCase.java
old mode 100644
new mode 100755
index 9df7d1f91c..835198e295
--- a/document/src/test/java/com/yahoo/document/json/JsonReaderTestCase.java
+++ b/document/src/test/java/com/yahoo/document/json/JsonReaderTestCase.java
@@ -247,7 +247,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         smokeTestDoc(put.getDocument());
     }
 
@@ -266,7 +266,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         smokeTestDoc(put.getDocument());
     }
 
@@ -277,7 +277,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         assertEquals("id:unittest:smoke::whee", parseInfo.documentId.toString());
     }
 
@@ -291,7 +291,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("skuggsjaa"));
         assertSame(Struct.class, f.getClass());
@@ -499,7 +499,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("actualset"));
         assertSame(WeightedSet.class, f.getClass());
@@ -519,7 +519,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("actualarray"));
         assertSame(Array.class, f.getClass());
@@ -539,7 +539,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("actualmap"));
         assertSame(MapFieldValue.class, f.getClass());
@@ -559,7 +559,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("actualmap"));
         assertSame(MapFieldValue.class, f.getClass());
@@ -577,7 +577,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("singlepos"));
         assertSame(Struct.class, f.getClass());
@@ -593,7 +593,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("singlepos"));
         assertSame(Struct.class, f.getClass());
@@ -610,7 +610,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue(doc.getField("actualraw"));
         assertSame(Raw.class, f.getClass());
@@ -628,7 +628,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue("actualMapStringToArrayOfInt");
         assertSame(MapFieldValue.class, f.getClass());
@@ -649,7 +649,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         Document doc = put.getDocument();
         FieldValue f = doc.getFieldValue("actualMapStringToArrayOfInt");
         assertSame(MapFieldValue.class, f.getClass());
@@ -925,7 +925,7 @@ public class JsonReaderTestCase {
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
         exception.expect(IllegalArgumentException.class);
         exception.expectMessage("No field 'smething' in the structure of type 'smoke'");
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
     }
 
     @Test
@@ -950,7 +950,7 @@ public class JsonReaderTestCase {
         DocumentParseInfo parseInfo = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(parseInfo.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, parseInfo.documentId));
-        new VespaJsonDocumentReader().readPut(parseInfo.fieldsBuffer, put);
+        parseInfo.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         smokeTestDoc(put.getDocument());
     }
 
diff --git a/document/src/test/java/com/yahoo/document/json/JsonWriterTestCase.java b/document/src/test/java/com/yahoo/document/json/JsonWriterTestCase.java
old mode 100644
new mode 100755
index 0ab00b4e2b..3d143fba31
--- a/document/src/test/java/com/yahoo/document/json/JsonWriterTestCase.java
+++ b/document/src/test/java/com/yahoo/document/json/JsonWriterTestCase.java
@@ -334,7 +334,7 @@ public class JsonWriterTestCase {
         DocumentParseInfo raw = r.parseDocument().get();
         DocumentType docType = r.readDocumentType(raw.documentId);
         DocumentPut put = new DocumentPut(new Document(docType, raw.documentId));
-        new VespaJsonDocumentReader().readPut(raw.fieldsBuffer, put);
+        raw.fieldsBuffer.readPut(put, new VespaJsonDocumentReader());
         return put.getDocument();
     }
 
diff --git a/document/src/test/java/com/yahoo/document/serialization/SerializeAnnotationsTestCase.java b/document/src/test/java/com/yahoo/document/serialization/SerializeAnnotationsTestCase.java
old mode 100644
new mode 100755
index 653f121b2d..33d129dbfa
--- a/document/src/test/java/com/yahoo/document/serialization/SerializeAnnotationsTestCase.java
+++ b/document/src/test/java/com/yahoo/document/serialization/SerializeAnnotationsTestCase.java
@@ -143,9 +143,8 @@ public class SerializeAnnotationsTestCase {
             paragraph.add(1, alt_span1)
                 .add(1, alt_span2);
 
-            tree.annotate(span1, beginTag)
-                .annotate(span2, textType)
-                .annotate(span3, sanAnnotation)
+            sanAnnotation.annotate(span3, tree.annotate(span1, beginTag)
+                .annotate(span2, textType))
                 .annotate(span4, endTag)
                 .annotate(alt_span1, textType)
                 .annotate(alt_span2, bodyType)
@@ -161,8 +160,7 @@ public class SerializeAnnotationsTestCase {
                 .add(span2)
                 .add(span3);
 
-            tree.annotate(span1, beginTag)
-                .annotate(span2, franciscoAnnotation)
+            franciscoAnnotation.annotate(span2, tree.annotate(span1, beginTag))
                 .annotate(span3, endTag)
                 .annotate(root, bodyType)
                 .annotate(city);
diff --git a/indexinglanguage/src/main/java/com/yahoo/vespa/indexinglanguage/expressions/ExactExpression.java b/indexinglanguage/src/main/java/com/yahoo/vespa/indexinglanguage/expressions/ExactExpression.java
old mode 100644
new mode 100755
index 6056a9b0ca..ff5cedb144
--- a/indexinglanguage/src/main/java/com/yahoo/vespa/indexinglanguage/expressions/ExactExpression.java
+++ b/indexinglanguage/src/main/java/com/yahoo/vespa/indexinglanguage/expressions/ExactExpression.java
@@ -38,10 +38,10 @@ public final class ExactExpression extends Expression {
         SpanList root = new SpanList();
         SpanTree tree = new SpanTree(SpanTrees.LINGUISTICS, root);
         SpanNode node = new Span(0, prev.length());
-        tree.annotate(node, new Annotation(AnnotationTypes.TERM,
-                                           next.equals(prev) ? null : new StringFieldValue(next)));
-        tree.annotate(node, new Annotation(AnnotationTypes.TOKEN_TYPE,
-                                           new IntegerFieldValue(TokenType.ALPHABETIC.getValue())));
+        new Annotation(AnnotationTypes.TERM,
+                                           next.equals(prev) ? null : new StringFieldValue(next)).annotate(node, tree);
+        new Annotation(AnnotationTypes.TOKEN_TYPE,
+                                           new IntegerFieldValue(TokenType.ALPHABETIC.getValue())).annotate(node, tree);
         root.add(node);
         output.setSpanTree(tree);
     }
diff --git a/indexinglanguage/src/test/java/com/yahoo/vespa/indexinglanguage/expressions/FlattenTestCase.java b/indexinglanguage/src/test/java/com/yahoo/vespa/indexinglanguage/expressions/FlattenTestCase.java
old mode 100644
new mode 100755
index 8867d64d19..311b3d4d16
--- a/indexinglanguage/src/test/java/com/yahoo/vespa/indexinglanguage/expressions/FlattenTestCase.java
+++ b/indexinglanguage/src/test/java/com/yahoo/vespa/indexinglanguage/expressions/FlattenTestCase.java
@@ -27,9 +27,9 @@ public class FlattenTestCase {
     @Test
     public void requireThatAnnotationsAreFlattened() {
         SpanTree tree = new SpanTree(SpanTrees.LINGUISTICS);
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("oof")));
-        tree.annotate(new Span(4, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("rab")));
-        tree.annotate(new Span(8, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("zab")));
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("oof")).annotate(new Span(0, 3), tree);
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("rab")).annotate(new Span(4, 3), tree);
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("zab")).annotate(new Span(8, 3), tree);
 
         StringFieldValue val = new StringFieldValue("foo bar baz");
         val.setSpanTree(tree);
@@ -40,7 +40,7 @@ public class FlattenTestCase {
     @Test
     public void requireThatNonTermAnnotationsAreIgnored() {
         SpanTree tree = new SpanTree(SpanTrees.LINGUISTICS);
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.STEM, new StringFieldValue("oof")));
+        new Annotation(AnnotationTypes.STEM, new StringFieldValue("oof")).annotate(new Span(0, 3), tree);
 
         StringFieldValue val = new StringFieldValue("foo");
         val.setSpanTree(tree);
@@ -62,9 +62,9 @@ public class FlattenTestCase {
     @Test
     public void requireThatAnnotationsAreSorted() {
         SpanTree tree = new SpanTree(SpanTrees.LINGUISTICS);
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("cox")));
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("baz")));
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.TERM, new StringFieldValue("bar")));
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("cox")).annotate(new Span(0, 3), tree);
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("baz")).annotate(new Span(0, 3), tree);
+        new Annotation(AnnotationTypes.TERM, new StringFieldValue("bar")).annotate(new Span(0, 3), tree);
 
         StringFieldValue val = new StringFieldValue("foo");
         val.setSpanTree(tree);
@@ -75,7 +75,7 @@ public class FlattenTestCase {
     @Test
     public void requireThatAnnotationsWithoutFieldValueUseOriginalSpan() {
         SpanTree tree = new SpanTree(SpanTrees.LINGUISTICS);
-        tree.annotate(new Span(0, 3), new Annotation(AnnotationTypes.TERM));
+        new Annotation(AnnotationTypes.TERM).annotate(new Span(0, 3), tree);
 
         StringFieldValue val = new StringFieldValue("foo");
         val.setSpanTree(tree);
diff --git a/jrt/src/com/yahoo/jrt/Request.java b/jrt/src/com/yahoo/jrt/Request.java
old mode 100644
new mode 100755
index 66e6f50871..be748ba177
--- a/jrt/src/com/yahoo/jrt/Request.java
+++ b/jrt/src/com/yahoo/jrt/Request.java
@@ -2,6 +2,8 @@
 package com.yahoo.jrt;
 
 
+import com.yahoo.jrt.tool.RpcInvoker;
+
 /**
  * A Request bundles information about a single RPC invocation. A
  * Request contains the name of the method, the method parameters, the
@@ -278,4 +280,29 @@ public class Request
         return "request " + methodName + "(" + parameters + ")" + ( returnValues.size()>0 ? ": " + returnValues : "");
     }
 
+    public Value getArgument(String parameter, RpcInvoker rpcInvoker) {
+        if (parameter.length()<=1 || parameter.charAt(1)!=':')
+            return new StringValue(parameter);
+
+        String value=parameter.substring(2);
+        switch (parameter.charAt(0)) {
+            case 'b':
+                return new Int8Value(Byte.parseByte(value));
+            case 'h':
+                return new Int16Value(Short.parseShort(value));
+            case 'i':
+                return new Int32Value(Integer.parseInt(value));
+            case 'l':
+                return new Int64Value(Long.parseLong(value));
+            case 'f':
+                return new FloatValue(Float.parseFloat(value));
+            case 'd':
+                return new DoubleValue(Double.parseDouble(value));
+            case 's':
+                return new StringValue(value);
+        }
+
+        throw new IllegalArgumentException("The first letter in '" + parameter + "' must be a type argument. " +
+                                           "There is no jrt type identified by '" + parameter.charAt(0) + "'");
+    }
 }
diff --git a/jrt/src/com/yahoo/jrt/Spec.java b/jrt/src/com/yahoo/jrt/Spec.java
old mode 100644
new mode 100755
index 7e4f6d987f..7bfffac633
--- a/jrt/src/com/yahoo/jrt/Spec.java
+++ b/jrt/src/com/yahoo/jrt/Spec.java
@@ -143,4 +143,19 @@ public class Spec {
         return asString;
     }
 
+    /**
+     * Convenience method for connecting to a peer, invoking a method
+     * and disconnecting.
+     *  @param req the invocation request
+     * @param timeout request timeout in seconds
+     * @param supervisor
+     **/
+    public void invokeBatch(Request req, double timeout, Supervisor supervisor) {
+        Target target = supervisor.connect(this);
+        try {
+            target.invokeSync(req, timeout);
+        } finally {
+            target.close();
+        }
+    }
 }
diff --git a/jrt/src/com/yahoo/jrt/Supervisor.java b/jrt/src/com/yahoo/jrt/Supervisor.java
old mode 100644
new mode 100755
index 09360c2da7..87b9b2802a
--- a/jrt/src/com/yahoo/jrt/Supervisor.java
+++ b/jrt/src/com/yahoo/jrt/Supervisor.java
@@ -168,23 +168,6 @@ public class Supervisor {
         return transport.listen(this, spec);
     }
 
-    /**
-     * Convenience method for connecting to a peer, invoking a method
-     * and disconnecting.
-     *
-     * @param spec the address to connect to
-     * @param req the invocation request
-     * @param timeout request timeout in seconds
-     **/
-    public void invokeBatch(Spec spec, Request req, double timeout) {
-        Target target = connect(spec);
-        try {
-            target.invokeSync(req, timeout);
-        } finally {
-            target.close();
-        }
-    }
-
     /**
      * This method is invoked when a new target is created
      *
diff --git a/jrt/src/com/yahoo/jrt/tool/RpcInvoker.java b/jrt/src/com/yahoo/jrt/tool/RpcInvoker.java
old mode 100644
new mode 100755
index 7803767e4d..bd15d2edc7
--- a/jrt/src/com/yahoo/jrt/tool/RpcInvoker.java
+++ b/jrt/src/com/yahoo/jrt/tool/RpcInvoker.java
@@ -1,19 +1,11 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.jrt.tool;
 
-import com.yahoo.jrt.DoubleValue;
-import com.yahoo.jrt.FloatValue;
-import com.yahoo.jrt.Int16Value;
-import com.yahoo.jrt.Int32Value;
-import com.yahoo.jrt.Int64Value;
-import com.yahoo.jrt.Int8Value;
 import com.yahoo.jrt.Request;
 import com.yahoo.jrt.Spec;
-import com.yahoo.jrt.StringValue;
 import com.yahoo.jrt.Supervisor;
 import com.yahoo.jrt.Target;
 import com.yahoo.jrt.Transport;
-import com.yahoo.jrt.Value;
 import com.yahoo.jrt.Values;
 
 import java.util.Arrays;
@@ -27,37 +19,11 @@ import java.util.ArrayList;
  */
 public class RpcInvoker {
 
-    private Value getArgument(Request request, String parameter) {
-        if (parameter.length()<=1 || parameter.charAt(1)!=':')
-            return new StringValue(parameter);
-
-        String value=parameter.substring(2);
-        switch (parameter.charAt(0)) {
-            case 'b':
-                return new Int8Value(Byte.parseByte(value));
-            case 'h':
-                return new Int16Value(Short.parseShort(value));
-            case 'i':
-                return new Int32Value(Integer.parseInt(value));
-            case 'l':
-                return new Int64Value(Long.parseLong(value));
-            case 'f':
-                return new FloatValue(Float.parseFloat(value));
-            case 'd':
-                return new DoubleValue(Double.parseDouble(value));
-            case 's':
-                return new StringValue(value);
-        }
-
-        throw new IllegalArgumentException("The first letter in '" + parameter + "' must be a type argument. " +
-                                           "There is no jrt type identified by '" + parameter.charAt(0) + "'");
-    }
-
     protected Request createRequest(String method,List<String> arguments) {
         Request request=new Request(method);
         if (arguments!=null) {
             for (String argument : arguments)
-                request.parameters().add(getArgument(request,argument));
+                request.parameters().add(request.getArgument(argument, this));
         }
         return request;
     }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/AggregationResult.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/AggregationResult.java
old mode 100644
new mode 100755
index 264a9d4d4e..212565f7f2
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/AggregationResult.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/AggregationResult.java
@@ -158,4 +158,15 @@ public abstract class AggregationResult extends ExpressionNode {
         visitor.visit("expression", expression);
         visitor.visit("tag", tag);
     }
+
+    /**
+     * <p>Adds an aggregation result to this group.</p>
+     *
+     *
+     * @param group@return This, to allow chaining.
+     */
+    public Group addAggregationResult(Group group) {
+        group.getAggregationResults().add(this);
+        return group;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Group.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Group.java
old mode 100644
new mode 100755
index 73171f4dd0..a1c615481f
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Group.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Group.java
@@ -252,17 +252,6 @@ public class Group extends Identifiable {
         return aggregationResults;
     }
 
-    /**
-     * <p>Adds an aggregation result to this group.</p>
-     *
-     * @param result The result to add.
-     * @return This, to allow chaining.
-     */
-    public Group addAggregationResult(AggregationResult result) {
-        aggregationResults.add(result);
-        return this;
-    }
-
     /**
      * <p>Adds an order-by expression to this group. If the expression is an AggregationResult, it will be added to the
      * list of this group's AggregationResults, and a reference to that expression is added instead. If the
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Grouping.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Grouping.java
old mode 100644
new mode 100755
index c13bde4b63..10132613ea
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Grouping.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Grouping.java
@@ -204,19 +204,6 @@ public class Grouping extends Identifiable {
         return groupingLevels;
     }
 
-    /**
-     * <p>Appends the given grouping level specification to the list of levels.</p>
-     *
-     * @param level The level to add.
-     * @return This, to allow chaining.
-     * @throws NullPointerException If <code>level</code> argument is null.
-     */
-    public Grouping addLevel(GroupingLevel level) {
-        level.getClass(); // throws NullPointerException
-        groupingLevels.add(level);
-        return this;
-    }
-
     /**
      * <p>Returns the root group.</p>
      *
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/GroupingLevel.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/GroupingLevel.java
old mode 100644
new mode 100755
index 239b709406..af83c445e3
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/GroupingLevel.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/GroupingLevel.java
@@ -181,4 +181,17 @@ public class GroupingLevel extends Identifiable {
         visitor.visit("classify", classify);
         visitor.visit("collect", collect);
     }
+
+    /**
+     * <p>Appends the given grouping level specification to the list of levels.</p>
+     *
+     *
+     * @param grouping@return This, to allow chaining.
+     * @throws NullPointerException If <code>level</code> argument is null.
+     */
+    public Grouping addLevel(Grouping grouping) {
+        getClass(); // throws NullPointerException
+        grouping.getLevels().add(this);
+        return grouping;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Hit.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Hit.java
old mode 100644
new mode 100755
index 6b2ce5c3b7..b6bc2293b9
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Hit.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/Hit.java
@@ -101,4 +101,15 @@ public abstract class Hit extends Identifiable {
         visitor.visit("rank", rank);
         visitor.visit("context", context);
     }
+
+    /**
+     * Add a hit to this aggregation result
+     *
+     *
+     * @param hitsAggregationResult@return this object
+     */
+    public HitsAggregationResult addHit(HitsAggregationResult hitsAggregationResult) {
+        hitsAggregationResult.getHits().add(this);
+        return hitsAggregationResult;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/HitsAggregationResult.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/HitsAggregationResult.java
old mode 100644
new mode 100755
index 275f38f735..fec18db305
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/HitsAggregationResult.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/HitsAggregationResult.java
@@ -101,17 +101,6 @@ public class HitsAggregationResult extends AggregationResult {
         return hits;
     }
 
-    /**
-     * Add a hit to this aggregation result
-     *
-     * @param h the hit
-     * @return this object
-     */
-    public HitsAggregationResult addHit(Hit h) {
-        hits.add(h);
-        return this;
-    }
-
     @Override
     public ResultNode getRank() {
         if (hits.isEmpty()) {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SketchMerger.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SketchMerger.java
old mode 100644
new mode 100755
index 11a51e8aa6..c34b898e77
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SketchMerger.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SketchMerger.java
@@ -21,23 +21,13 @@ public class SketchMerger {
         } else if (left instanceof SparseSketch && right instanceof NormalSketch) {
             return mergeNormalWithSparse(asNormal(right), asSparse(left));
         } else if (left instanceof SparseSketch && right instanceof SparseSketch) {
-            return mergeSparseWithSparse(asSparse(left), asSparse(right));
+            return asSparse(left).mergeSparseWithSparse(asSparse(right), this);
         } else {
             throw new IllegalArgumentException(
                     String.format("Invalid sketch types: left=%s, right=%s", right.getClass(), left.getClass()));
         }
     }
 
-    private Sketch<?> mergeSparseWithSparse(SparseSketch dest, SparseSketch other) {
-        dest.merge(other);
-        if (dest.size() > HyperLogLog.SPARSE_SKETCH_CONVERSION_THRESHOLD) {
-            NormalSketch newSketch = new NormalSketch();
-            newSketch.aggregate(dest.data());
-            return newSketch;
-        }
-        return dest;
-    }
-
     private NormalSketch mergeNormalWithNormal(NormalSketch dest, NormalSketch other) {
         dest.merge(other);
         return dest;
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SparseSketch.java b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SparseSketch.java
old mode 100644
new mode 100755
index 29f49060a5..d11487514d
--- a/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SparseSketch.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/aggregation/hll/SparseSketch.java
@@ -102,4 +102,14 @@ public class SparseSketch extends Sketch<SparseSketch> {
                 "values=" + values +
                 '}';
     }
+
+    public Sketch<?> mergeSparseWithSparse(SparseSketch other, SketchMerger sketchMerger) {
+        merge(other);
+        if (size() > HyperLogLog.SPARSE_SKETCH_CONVERSION_THRESHOLD) {
+            NormalSketch newSketch = new NormalSketch();
+            newSketch.aggregate(data());
+            return newSketch;
+        }
+        return this;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNode.java
old mode 100644
new mode 100755
index c850c6f2c3..66b21e528d
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNode.java
@@ -92,4 +92,9 @@ public class BoolResultNode extends ResultNode {
     public void set(ResultNode rhs) {
         value = rhs.getInteger() > 0;
     }
+
+    public BoolResultNodeVector add(BoolResultNodeVector boolResultNodeVector) {
+        boolResultNodeVector.getVector().add(this);
+        return boolResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNodeVector.java
old mode 100644
new mode 100755
index b8d31be834..39e034852c
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/BoolResultNodeVector.java
@@ -11,17 +11,13 @@ public class BoolResultNodeVector extends ResultNodeVector {
     private ArrayList<BoolResultNode> vector = new ArrayList<>();
 
     public BoolResultNodeVector() {}
-    public BoolResultNodeVector add(BoolResultNode v) {
-        vector.add(v);
-        return this;
-    }
 
     public ArrayList<BoolResultNode> getVector() {
         return vector;
     }
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((BoolResultNode)r);
+        return ((BoolResultNode)r).add(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNode.java
old mode 100644
new mode 100755
index 455a8a4250..c877086b7a
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNode.java
@@ -115,4 +115,9 @@ public class FloatBucketResultNode extends BucketResultNode {
         visitor.visit("from", from);
         visitor.visit("to", to);
     }
+
+    public FloatBucketResultNodeVector add(FloatBucketResultNodeVector floatBucketResultNodeVector) {
+        floatBucketResultNodeVector.getVector().add(this);
+        return floatBucketResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNodeVector.java
old mode 100644
new mode 100755
index 443358c762..fd65825476
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatBucketResultNodeVector.java
@@ -26,13 +26,8 @@ public class FloatBucketResultNodeVector extends ResultNodeVector {
     public FloatBucketResultNodeVector() {
     }
 
-    public FloatBucketResultNodeVector add(FloatBucketResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((FloatBucketResultNode)r);
+        return ((FloatBucketResultNode)r).add(this);
     }
 
     public ArrayList<FloatBucketResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNode.java
old mode 100644
new mode 100755
index bcc4f06171..fab3da952e
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNode.java
@@ -179,4 +179,9 @@ public class FloatResultNode extends NumericResultNode {
     public static FloatResultNode getPositiveInfinity() {
         return positiveInfinity;
     }
+
+    public FloatResultNodeVector addOther(FloatResultNodeVector floatResultNodeVector) {
+        floatResultNodeVector.getVector().add(this);
+        return floatResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNodeVector.java
old mode 100644
new mode 100755
index 1cb978303d..ce7ed508ac
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/FloatResultNodeVector.java
@@ -26,13 +26,8 @@ public class FloatResultNodeVector extends ResultNodeVector {
     public FloatResultNodeVector() {
     }
 
-    public FloatResultNodeVector add(FloatResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((FloatResultNode)r);
+        return ((FloatResultNode)r).addOther(this);
     }
 
     public ArrayList<FloatResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNode.java
old mode 100644
new mode 100755
index 3e15c35b25..41394f0e83
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNode.java
@@ -146,4 +146,9 @@ public class Int16ResultNode extends NumericResultNode {
     public void set(ResultNode rhs) {
         value = (short)rhs.getInteger();
     }
+
+    public Int16ResultNodeVector addOther(Int16ResultNodeVector int16ResultNodeVector) {
+        int16ResultNodeVector.getVector().add(this);
+        return int16ResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNodeVector.java
old mode 100644
new mode 100755
index 2842efe710..89c0e32010
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int16ResultNodeVector.java
@@ -20,18 +20,13 @@ public class Int16ResultNodeVector extends ResultNodeVector {
     public Int16ResultNodeVector() {
     }
 
-    public Int16ResultNodeVector add(Int16ResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ArrayList<Int16ResultNode> getVector() {
         return vector;
     }
 
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((Int16ResultNode)r);
+        return ((Int16ResultNode)r).addOther(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNode.java
old mode 100644
new mode 100755
index 111d3f5c5f..97a7edb9df
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNode.java
@@ -146,4 +146,9 @@ public class Int32ResultNode extends NumericResultNode {
     public void set(ResultNode rhs) {
         value = (int)rhs.getInteger();
     }
+
+    public Int32ResultNodeVector addOther(Int32ResultNodeVector int32ResultNodeVector) {
+        int32ResultNodeVector.getVector().add(this);
+        return int32ResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNodeVector.java
old mode 100644
new mode 100755
index 2dd9e577cf..229bad2bb9
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int32ResultNodeVector.java
@@ -21,18 +21,13 @@ public class Int32ResultNodeVector extends ResultNodeVector {
 
     }
 
-    public Int32ResultNodeVector add(Int32ResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ArrayList<Int32ResultNode> getVector() {
         return vector;
     }
 
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((Int32ResultNode)r);
+        return ((Int32ResultNode)r).addOther(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNode.java
old mode 100644
new mode 100755
index f240a2d5ef..020b7cff4c
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNode.java
@@ -144,4 +144,9 @@ public class Int8ResultNode extends NumericResultNode {
     public void set(ResultNode rhs) {
         value = (byte)rhs.getInteger();
     }
+
+    public Int8ResultNodeVector addOther(Int8ResultNodeVector int8ResultNodeVector) {
+        int8ResultNodeVector.getVector().add(this);
+        return int8ResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNodeVector.java
old mode 100644
new mode 100755
index edae250def..63f0999d72
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/Int8ResultNodeVector.java
@@ -21,18 +21,13 @@ public class Int8ResultNodeVector extends ResultNodeVector {
 
     }
 
-    public Int8ResultNodeVector add(Int8ResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ArrayList<Int8ResultNode> getVector() {
         return vector;
     }
 
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((Int8ResultNode)r);
+        return ((Int8ResultNode)r).addOther(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNode.java
old mode 100644
new mode 100755
index b8f41d8b06..2f4506ddd1
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNode.java
@@ -99,4 +99,9 @@ public class IntegerBucketResultNode extends BucketResultNode {
         visitor.visit("from", from);
         visitor.visit("to", to);
     }
+
+    public IntegerBucketResultNodeVector add(IntegerBucketResultNodeVector integerBucketResultNodeVector) {
+        integerBucketResultNodeVector.getVector().add(this);
+        return integerBucketResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNodeVector.java
old mode 100644
new mode 100755
index c999fdfc6e..6a9502e8ef
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerBucketResultNodeVector.java
@@ -21,11 +21,6 @@ public class IntegerBucketResultNodeVector extends ResultNodeVector {
 
     }
 
-    public IntegerBucketResultNodeVector add(IntegerBucketResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ArrayList<IntegerBucketResultNode> getVector() {
         return vector;
     }
@@ -37,7 +32,7 @@ public class IntegerBucketResultNodeVector extends ResultNodeVector {
 
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((IntegerBucketResultNode)r);
+        return ((IntegerBucketResultNode)r).add(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNode.java
old mode 100644
new mode 100755
index 62534377d3..7bf27f74d7
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNode.java
@@ -180,4 +180,9 @@ public class IntegerResultNode extends NumericResultNode {
     public static IntegerResultNode getPositiveInfinity() {
         return positiveInfinity;
     }
+
+    public IntegerResultNodeVector addOther(IntegerResultNodeVector integerResultNodeVector) {
+        integerResultNodeVector.getVector().add(this);
+        return integerResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNodeVector.java
old mode 100644
new mode 100755
index 3323460da0..cfaa600fbf
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/IntegerResultNodeVector.java
@@ -21,18 +21,13 @@ public class IntegerResultNodeVector extends ResultNodeVector {
 
     }
 
-    public IntegerResultNodeVector add(IntegerResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ArrayList<IntegerResultNode> getVector() {
         return vector;
     }
 
     @Override
     public ResultNodeVector add(ResultNode r) {
-        return add((IntegerResultNode)r);
+        return ((IntegerResultNode)r).addOther(this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNode.java
old mode 100644
new mode 100755
index 50b63e2d5d..9dcba50925
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNode.java
@@ -98,4 +98,9 @@ public class RawBucketResultNode extends BucketResultNode {
         visitor.visit("from", from);
         visitor.visit("to", to);
     }
+
+    public RawBucketResultNodeVector add(RawBucketResultNodeVector rawBucketResultNodeVector) {
+        rawBucketResultNodeVector.getVector().add(this);
+        return rawBucketResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNodeVector.java
old mode 100644
new mode 100755
index 9013a925e8..f34c54b683
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawBucketResultNodeVector.java
@@ -22,13 +22,8 @@ public class RawBucketResultNodeVector extends ResultNodeVector {
     public RawBucketResultNodeVector() {
     }
 
-    public RawBucketResultNodeVector add(RawBucketResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((RawBucketResultNode)r);
+        return ((RawBucketResultNode)r).add(this);
     }
 
     public ArrayList<RawBucketResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNode.java
old mode 100644
new mode 100755
index 2ff573218e..f2f1eea605
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNode.java
@@ -181,4 +181,8 @@ public class RawResultNode extends SingleResultNode {
         return positiveInfinity;
     }
 
+    public RawResultNodeVector addOther(RawResultNodeVector rawResultNodeVector) {
+        rawResultNodeVector.getVector().add(this);
+        return rawResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNodeVector.java
old mode 100644
new mode 100755
index 4bb9fc7809..8967a4291c
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/RawResultNodeVector.java
@@ -26,13 +26,8 @@ public class RawResultNodeVector extends ResultNodeVector {
     public RawResultNodeVector() {
     }
 
-    public RawResultNodeVector add(RawResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((RawResultNode)r);
+        return ((RawResultNode)r).addOther(this);
     }
 
     public ArrayList<RawResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNode.java
old mode 100644
new mode 100755
index 279f8b17fc..899e6a6f62
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNode.java
@@ -111,4 +111,9 @@ public class StringBucketResultNode extends BucketResultNode {
         visitor.visit("from", from);
         visitor.visit("to", to);
     }
+
+    public StringBucketResultNodeVector add(StringBucketResultNodeVector stringBucketResultNodeVector) {
+        stringBucketResultNodeVector.getVector().add(this);
+        return stringBucketResultNodeVector;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNodeVector.java
old mode 100644
new mode 100755
index 9b530164e5..d4fe2e3e69
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringBucketResultNodeVector.java
@@ -26,13 +26,8 @@ public class StringBucketResultNodeVector extends ResultNodeVector {
     public StringBucketResultNodeVector() {
     }
 
-    public StringBucketResultNodeVector add(StringBucketResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((StringBucketResultNode)r);
+        return ((StringBucketResultNode)r).add(this);
     }
 
     public ArrayList<StringBucketResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNode.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNode.java
old mode 100644
new mode 100755
index 40d424a275..d1eef45a35
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNode.java
@@ -173,5 +173,10 @@ public class StringResultNode extends SingleResultNode {
     public static PositiveInfinityResultNode getPositiveInfinity() {
         return positiveInfinity;
     }
+
+    public StringResultNodeVector addOther(StringResultNodeVector stringResultNodeVector) {
+        stringResultNodeVector.getVector().add(this);
+        return stringResultNodeVector;
+    }
 }
 
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNodeVector.java b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNodeVector.java
old mode 100644
new mode 100755
index 2cba466f93..432155d879
--- a/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNodeVector.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/expression/StringResultNodeVector.java
@@ -26,13 +26,8 @@ public class StringResultNodeVector extends ResultNodeVector {
     public StringResultNodeVector() {
     }
 
-    public StringResultNodeVector add(StringResultNode v) {
-        vector.add(v);
-        return this;
-    }
-
     public ResultNodeVector add(ResultNode r) {
-        return add((StringResultNode)r);
+        return ((StringResultNode)r).addOther(this);
     }
 
     public ArrayList<StringResultNode> getVector() {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/Context.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/Context.java
old mode 100644
new mode 100755
index 4e046df11c..7cbdd61fa5
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/Context.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/Context.java
@@ -4,6 +4,7 @@ package com.yahoo.searchlib.rankingexpression.evaluation;
 import com.yahoo.searchlib.rankingexpression.Reference;
 import com.yahoo.searchlib.rankingexpression.rule.Arguments;
 import com.yahoo.searchlib.rankingexpression.rule.ExpressionNode;
+import com.yahoo.searchlib.rankingexpression.rule.SetMembershipNode;
 import com.yahoo.tensor.Tensor;
 import com.yahoo.tensor.TensorType;
 import com.yahoo.tensor.evaluation.EvaluationContext;
@@ -116,4 +117,11 @@ public abstract class Context implements EvaluationContext<Reference> {
         throw new UnsupportedOperationException(this + " does not support return a list of its names");
     }
 
+    public boolean testMembership(Predicate<Value> test, SetMembershipNode setMembershipNode) {
+        for (ExpressionNode setValue : setMembershipNode.getSetValues()) {
+            if (test.test(setValue.evaluate(this)))
+                return true;
+        }
+        return false;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/TensorValue.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/TensorValue.java
old mode 100644
new mode 100755
index ee66dcc5a0..69926369ee
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/TensorValue.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/TensorValue.java
@@ -122,7 +122,7 @@ public class TensorValue extends Value {
         if ( ! (value instanceof TensorValue))
             throw new UnsupportedOperationException("Could not perform " + operationName +
                                                     ": The second argument must be a tensor but was " + value);
-        return ((TensorValue)value).value;
+        return asTensor();
     }
 
     public Tensor asTensor() { return value; }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/gbdtoptimization/GBDTOptimizer.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/gbdtoptimization/GBDTOptimizer.java
old mode 100644
new mode 100755
index 787818b0f4..6d22d3ab0e
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/gbdtoptimization/GBDTOptimizer.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/evaluation/gbdtoptimization/GBDTOptimizer.java
@@ -117,16 +117,16 @@ public class GBDTOptimizer extends Optimizer {
         if (condition instanceof ComparisonNode) {
             ComparisonNode comparison = (ComparisonNode)condition;
             if (comparison.getOperator() == TruthOperator.SMALLER)
-                values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*0 + getVariableIndex(comparison.getLeftCondition(), context));
+                values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*0 + comparison.getLeftCondition().getVariableIndex(context, this));
             else if (comparison.getOperator() == TruthOperator.EQUAL)
-                values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*1 + getVariableIndex(comparison.getLeftCondition(), context));
+                values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*1 + comparison.getLeftCondition().getVariableIndex(context, this));
             else
                 throw new IllegalArgumentException("Cannot optimize other conditions than < and ==, encountered: " + comparison.getOperator());
             values.add(toValue(comparison.getRightCondition()));
         }
         else if (condition instanceof SetMembershipNode) {
             SetMembershipNode setMembership = (SetMembershipNode)condition;
-            values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*2 + getVariableIndex(setMembership.getTestValue(),context));
+            values.add(GBDTNode.MAX_LEAF_VALUE + GBDTNode.MAX_VARIABLES*2 + setMembership.getTestValue().getVariableIndex(context, this));
             values.add((double)setMembership.getSetValues().size());
             for (ExpressionNode setElementNode : setMembership.getSetValues())
                 values.add(toValue(setElementNode));
@@ -138,21 +138,6 @@ public class GBDTOptimizer extends Optimizer {
         return values.size();
     }
 
-    private double getVariableIndex(ExpressionNode node, ContextIndex context) {
-        if (!(node instanceof ReferenceNode)) {
-            throw new IllegalArgumentException("Contained a left-hand comparison expression " +
-                                               "which was not a feature value but was: " + node);
-        }
-        ReferenceNode fNode = (ReferenceNode)node;
-        Integer index = context.getIndex(fNode.toString());
-        if (index == null) {
-            throw new IllegalStateException("The ranking expression contained feature '" + fNode.getName() +
-                                            "', which is not known to " + context + ": The context must be created" +
-                                            "from the same ranking expression which is to be optimized");
-        }
-        return index;
-    }
-
     private double toValue(ExpressionNode node) {
         if (node instanceof ConstantNode) {
             Value value = ((ConstantNode)node).getValue();
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/EmbracedNode.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/EmbracedNode.java
index d306e067d1..3663136f6d 100755
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/EmbracedNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/EmbracedNode.java
@@ -4,6 +4,7 @@ package com.yahoo.searchlib.rankingexpression.rule;
 import com.yahoo.searchlib.rankingexpression.Reference;
 import com.yahoo.searchlib.rankingexpression.evaluation.Context;
 import com.yahoo.searchlib.rankingexpression.evaluation.Value;
+import com.yahoo.searchlib.rankingexpression.transform.Simplifier;
 import com.yahoo.tensor.TensorType;
 import com.yahoo.tensor.evaluation.TypeContext;
 
@@ -62,4 +63,9 @@ public final class EmbracedNode extends CompositeNode {
         return new EmbracedNode(newChildren.get(0));
     }
 
+    public boolean hasSingleUndividableChild(Simplifier simplifier) {
+        if (children().size() > 1) return false;
+        if (children().get(0) instanceof ArithmeticNode) return false;
+        return true;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/ExpressionNode.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/ExpressionNode.java
index dba0da7301..a5f086bc76 100755
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/ExpressionNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/ExpressionNode.java
@@ -3,7 +3,9 @@ package com.yahoo.searchlib.rankingexpression.rule;
 
 import com.yahoo.searchlib.rankingexpression.Reference;
 import com.yahoo.searchlib.rankingexpression.evaluation.Context;
+import com.yahoo.searchlib.rankingexpression.evaluation.ContextIndex;
 import com.yahoo.searchlib.rankingexpression.evaluation.Value;
+import com.yahoo.searchlib.rankingexpression.evaluation.gbdtoptimization.GBDTOptimizer;
 import com.yahoo.tensor.TensorType;
 import com.yahoo.tensor.evaluation.TypeContext;
 
@@ -60,4 +62,18 @@ public abstract class ExpressionNode implements Serializable {
      */
     public abstract Value evaluate(Context context);
 
+    public double getVariableIndex(ContextIndex context, GBDTOptimizer gbdtOptimizer) {
+        if (!(this instanceof ReferenceNode)) {
+            throw new IllegalArgumentException("Contained a left-hand comparison expression " +
+                                               "which was not a feature value but was: " + this);
+        }
+        ReferenceNode fNode = (ReferenceNode) this;
+        Integer index = context.getIndex(fNode.toString());
+        if (index == null) {
+            throw new IllegalStateException("The ranking expression contained feature '" + fNode.getName() +
+                                            "', which is not known to " + context + ": The context must be created" +
+                                            "from the same ranking expression which is to be optimized");
+        }
+        return index;
+    }
 }
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/SetMembershipNode.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/SetMembershipNode.java
old mode 100644
new mode 100755
index 9b3bd67481..f4be076c16
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/SetMembershipNode.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/rule/SetMembershipNode.java
@@ -75,7 +75,7 @@ public class SetMembershipNode extends BooleanNode {
     }
 
     private Value evaluateValue(Value value, Context context) {
-        return new BooleanValue(testMembership(value::equals, context));
+        return new BooleanValue(context.testMembership(value::equals, this));
     }
 
     private Value evaluateTensor(Tensor tensor, Context context) {
@@ -83,15 +83,7 @@ public class SetMembershipNode extends BooleanNode {
     }
 
     private boolean contains(double value, Context context) {
-        return testMembership((setValue) -> setValue.asDouble() == value, context);
-    }
-
-    private boolean testMembership(Predicate<Value> test, Context context) {
-        for (ExpressionNode setValue : setValues) {
-            if (test.test(setValue.evaluate(context)))
-                return true;
-        }
-        return false;
+        return context.testMembership((setValue) -> setValue.asDouble() == value, this);
     }
 
     @Override
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/ConstantDereferencer.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/ConstantDereferencer.java
old mode 100644
new mode 100755
index a541eac242..4484e6a525
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/ConstantDereferencer.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/ConstantDereferencer.java
@@ -1,7 +1,6 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.searchlib.rankingexpression.transform;
 
-import com.yahoo.searchlib.rankingexpression.evaluation.TensorValue;
 import com.yahoo.searchlib.rankingexpression.evaluation.Value;
 import com.yahoo.searchlib.rankingexpression.rule.CompositeNode;
 import com.yahoo.searchlib.rankingexpression.rule.ConstantNode;
@@ -30,19 +29,11 @@ public class ConstantDereferencer extends ExpressionTransformer<TransformContext
 
     private ExpressionNode transformFeature(ReferenceNode node, TransformContext context) {
         if (!node.getArguments().isEmpty())
-            return transformArguments(node, context);
+            return context.transformArguments(node, this);
         else
             return transformConstantReference(node, context);
     }
 
-    private ExpressionNode transformArguments(ReferenceNode node, TransformContext context) {
-        List<ExpressionNode> arguments = node.getArguments().expressions();
-        List<ExpressionNode> transformedArguments = new ArrayList<>(arguments.size());
-        for (ExpressionNode argument : arguments)
-            transformedArguments.add(transform(argument, context));
-        return node.setArguments(transformedArguments);
-    }
-
     private ExpressionNode transformConstantReference(ReferenceNode node, TransformContext context) {
         Value value = context.constants().get(node.getName());
         if (value == null || value.type().rank() > 0) {
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/Simplifier.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/Simplifier.java
old mode 100644
new mode 100755
index e8e2fdf245..f137e4a1f0
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/Simplifier.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/Simplifier.java
@@ -28,19 +28,13 @@ public class Simplifier extends ExpressionTransformer<TransformContext> {
             node = transformChildren((CompositeNode) node, context); // depth first
         if (node instanceof IfNode)
             node = transformIf((IfNode) node);
-        if (node instanceof EmbracedNode && hasSingleUndividableChild((EmbracedNode)node))
+        if (node instanceof EmbracedNode && ((EmbracedNode)node).hasSingleUndividableChild(this))
             node = ((EmbracedNode)node).children().get(0);
         if (node instanceof ArithmeticNode)
             node = transformArithmetic((ArithmeticNode) node);
         return node;
     }
 
-    private boolean hasSingleUndividableChild(EmbracedNode node) {
-        if (node.children().size() > 1) return false;
-        if (node.children().get(0) instanceof ArithmeticNode) return false;
-        return true;
-    }
-
     private ExpressionNode transformArithmetic(ArithmeticNode node) {
         if (node.children().size() > 1) {
             List<ExpressionNode> children = new ArrayList<>(node.children());
diff --git a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/TransformContext.java b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/TransformContext.java
old mode 100644
new mode 100755
index 7485ce69f9..fc753cbcf4
--- a/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/TransformContext.java
+++ b/searchlib/src/main/java/com/yahoo/searchlib/rankingexpression/transform/TransformContext.java
@@ -2,6 +2,8 @@
 package com.yahoo.searchlib.rankingexpression.transform;
 
 import com.yahoo.searchlib.rankingexpression.evaluation.Value;
+import com.yahoo.searchlib.rankingexpression.rule.ExpressionNode;
+import com.yahoo.searchlib.rankingexpression.rule.ReferenceNode;
 
 import java.util.Map;
 
@@ -20,4 +22,11 @@ public class TransformContext {
 
     public Map<String, Value> constants() { return constants; }
 
+    public ExpressionNode transformArguments(ReferenceNode node, ConstantDereferencer constantDereferencer) {
+        List<ExpressionNode> arguments = node.getArguments().expressions();
+        List<ExpressionNode> transformedArguments = new ArrayList<>(arguments.size());
+        for (ExpressionNode argument : arguments)
+            transformedArguments.add(constantDereferencer.transform(argument, this));
+        return node.setArguments(transformedArguments);
+    }
 }
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/AggregationTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/AggregationTestCase.java
old mode 100644
new mode 100755
index cbd6c02cd2..4f809ac97c
--- a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/AggregationTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/AggregationTestCase.java
@@ -123,8 +123,8 @@ public class AggregationTestCase {
         assertEquals(5, a.getMaxHits());
         assertEquals(0, a.getHits().size());
         a.setExpression(new AttributeNode("attributeA"));
-        a.addHit(new FS4Hit(1, createGlobalId(2), rank1));
-        a.addHit(new FS4Hit(5, createGlobalId(7), rank2));
+        new FS4Hit(1, createGlobalId(2), rank1).addHit(a);
+        new FS4Hit(5, createGlobalId(7), rank2).addHit(a);
         assertEquals(2, a.getHits().size());
         HitsAggregationResult b = (HitsAggregationResult)serializeDeserialize(a);
         assertEquals(a, b);
@@ -135,23 +135,16 @@ public class AggregationTestCase {
         assertEquals(1, a.getHits().size());
         assertEquals(2.0, a.getHits().get(0).getRank(), delta);
 
-        HitsAggregationResult hits = new HitsAggregationResult(3)
-            .addHit(new FS4Hit(1, createGlobalId(3), 1))
+        HitsAggregationResult hits = new FS4Hit(1, createGlobalId(3), 1).addHit(new HitsAggregationResult(3))
             .addHit(new FS4Hit(2, createGlobalId(2), 2))
             .addHit(new FS4Hit(3, createGlobalId(1), 3));
         Grouping request = new Grouping()
-            .setRoot(new Group()
-                     .addAggregationResult(hits.clone())
-                     .addChild(new Group()
-                               .addAggregationResult(hits.clone())
-                               .addChild(new Group()
-                                         .addAggregationResult(hits.clone())))
-                     .addChild(new Group()
-                               .addAggregationResult(hits.clone())
-                               .addChild(new Group()
-                                         .addAggregationResult(hits.clone())
-                                         .addChild(new Group()
-                                                   .addAggregationResult(hits.clone())))));
+            .setRoot(hits.clone().addAggregationResult(new Group())
+                     .addChild(hits.clone().addAggregationResult(new Group())
+                               .addChild(hits.clone().addAggregationResult(new Group())))
+                     .addChild(hits.clone().addAggregationResult(new Group())
+                               .addChild(hits.clone().addAggregationResult(new Group())
+                                         .addChild(hits.clone().addAggregationResult(new Group())))));
         assertFS4Hits(request, 0, 0, 3);
         assertFS4Hits(request, 1, 1, 6);
         assertFS4Hits(request, 2, 2, 6);
@@ -188,27 +181,20 @@ public class AggregationTestCase {
         assertEquals(5, a.getMaxHits());
         assertEquals(0, a.getHits().size());
         a.setExpression(new AttributeNode("attributeA"));
-        a.addHit(new VdsHit("1", s2, rank1));
+        new VdsHit("1", s2, rank1).addHit(a);
         HitsAggregationResult b = (HitsAggregationResult)serializeDeserialize(a);
         assertEquals(a, b);
 
-        HitsAggregationResult hits = new HitsAggregationResult(3)
-            .addHit(new VdsHit("1", s3, 1))
+        HitsAggregationResult hits = new VdsHit("1", s3, 1).addHit(new HitsAggregationResult(3))
             .addHit(new VdsHit("2", s2, 2))
             .addHit(new VdsHit("3", s1, 3));
         Grouping request = new Grouping()
-            .setRoot(new Group()
-                     .addAggregationResult(hits.clone())
-                     .addChild(new Group()
-                               .addAggregationResult(hits.clone())
-                               .addChild(new Group()
-                                         .addAggregationResult(hits.clone())))
-                     .addChild(new Group()
-                               .addAggregationResult(hits.clone())
-                               .addChild(new Group()
-                                         .addAggregationResult(hits.clone())
-                                         .addChild(new Group()
-                                                   .addAggregationResult(hits.clone())))));
+            .setRoot(hits.clone().addAggregationResult(new Group())
+                     .addChild(hits.clone().addAggregationResult(new Group())
+                               .addChild(hits.clone().addAggregationResult(new Group())))
+                     .addChild(hits.clone().addAggregationResult(new Group())
+                               .addChild(hits.clone().addAggregationResult(new Group())
+                                         .addChild(hits.clone().addAggregationResult(new Group())))));
         assertVdsHits(request, 0, 0, 3);
         assertVdsHits(request, 1, 1, 6);
         assertVdsHits(request, 2, 2, 6);
@@ -269,7 +255,7 @@ public class AggregationTestCase {
     public void testGroup() {
         Group a = new Group();
         a.setId(new IntegerResultNode(17));
-        a.addAggregationResult(new XorAggregationResult());
+        new XorAggregationResult().addAggregationResult(a);
         serializeDeserialize1(a);
     }
 
@@ -281,14 +267,14 @@ public class AggregationTestCase {
 
         XorAggregationResult xor = new XorAggregationResult();
         xor.setExpression(new MD5BitFunctionNode(new AttributeNode("docid"), 64));
-        level.getGroupPrototype().addAggregationResult(xor);
+        xor.addAggregationResult(level.getGroupPrototype());
 
         SumAggregationResult sum = new SumAggregationResult();
         MinFunctionNode min = new MinFunctionNode();
         min.addArg(new AttributeNode("attribute1"));
         min.addArg(new AttributeNode("attribute2"));
         sum.setExpression(min);
-        level.getGroupPrototype().addAggregationResult(sum);
+        sum.addAggregationResult(level.getGroupPrototype());
 
         CatFunctionNode cat = new CatFunctionNode();
         cat.addArg(new GetDocIdNamespaceSpecificFunctionNode());
@@ -296,17 +282,17 @@ public class AggregationTestCase {
         cat.addArg(new DocumentFieldNode("flags"));
         XorAggregationResult xor2 = new XorAggregationResult();
         xor2.setExpression(new XorBitFunctionNode(cat, 64));
-        level.getGroupPrototype().addAggregationResult(xor2);
-        a.addLevel(level);
+        xor2.addAggregationResult(level.getGroupPrototype());
+        level.addLevel(a);
 
         Group g = new Group();
         g.setId(new IntegerResultNode(17));
-        g.addAggregationResult(xor); // XXX: this is BAD
+        xor.addAggregationResult(g); // XXX: this is BAD
         a.getRoot().addChild(g);
         serializeDeserialize1(a);
 
         Grouping foo = new Grouping();
-        foo.addLevel(level);
+        level.addLevel(foo);
         int hashBefore = foo.hashCode();
         foo.setFirstLevel(66);
         assertEquals(hashBefore, foo.hashCode());
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupTestCase.java
old mode 100644
new mode 100755
index 95ab1c30a3..042bdd2c49
--- a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupTestCase.java
@@ -19,7 +19,7 @@ public class GroupTestCase {
     public void requireThatAggregationResultsCanBeAdded() {
         Group group = new Group();
         AggregationResult res = new AverageAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         assertEquals(1, group.getAggregationResults().size());
         assertSame(res, group.getAggregationResults().get(0));
     }
@@ -76,7 +76,7 @@ public class GroupTestCase {
     public void requireThatAddOrderByDoesNotAddDuplicateAggregationResult() {
         Group group = new Group();
         AggregationResult res = new MinAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         group.addOrderBy(res, true);
         assertEquals(1, group.getAggregationResults().size());
         assertSame(res, group.getAggregationResults().get(0));
@@ -87,7 +87,7 @@ public class GroupTestCase {
         Group group = new Group();
         AggregationResult foo = new MinAggregationResult();
         foo.setTag(6);
-        group.addAggregationResult(foo);
+        foo.addAggregationResult(group);
         AggregationResult bar = new MinAggregationResult();
         bar.setTag(9);
         group.addOrderBy(bar, true);
@@ -101,7 +101,7 @@ public class GroupTestCase {
         Group group = new Group();
         AggregationResult foo = new MinAggregationResult();
         foo.setTag(6);
-        group.addAggregationResult(foo);
+        foo.addAggregationResult(group);
         AggregationResult bar = new MaxAggregationResult();
         bar.setTag(9);
         group.addOrderBy(bar, true);
@@ -125,7 +125,7 @@ public class GroupTestCase {
     public void requireThatAddOrderByDoesNotAddDuplicateReferencedAggregationResult() {
         Group group = new Group();
         AggregationResult res = new MinAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         group.addOrderBy(new AggregationRefNode(res), true);
         assertEquals(1, group.getAggregationResults().size());
         assertSame(res, group.getAggregationResults().get(0));
@@ -144,7 +144,7 @@ public class GroupTestCase {
     public void requireThatAddOrderByDoesNotAddDuplicateDeepReferencedAggregationResult() {
         Group group = new Group();
         AggregationResult res = new MinAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         group.addOrderBy(new NegateFunctionNode(new AggregationRefNode(res)), true);
         assertEquals(1, group.getAggregationResults().size());
         assertSame(res, group.getAggregationResults().get(0));
@@ -154,7 +154,7 @@ public class GroupTestCase {
     public void requireThatAddOrderByResolvesReferenceIndex() {
         Group group = new Group();
         AggregationResult res = new MinAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         group.addOrderBy(new AggregationRefNode(res), true);
         assertEquals(1, group.getOrderByExpressions().size());
         AggregationRefNode ref = (AggregationRefNode)group.getOrderByExpressions().get(0);
@@ -166,7 +166,7 @@ public class GroupTestCase {
     public void requireThatAddOrderByResolvesDeepReferenceIndex() {
         Group group = new Group();
         AggregationResult res = new MinAggregationResult();
-        group.addAggregationResult(res);
+        res.addAggregationResult(group);
         group.addOrderBy(new NegateFunctionNode(new AggregationRefNode(res)), true);
         assertEquals(1, group.getOrderByExpressions().size());
         AggregationRefNode ref = (AggregationRefNode)((NegateFunctionNode)group.getOrderByExpressions().get(0)).getArg();
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingSerializationTest.java b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingSerializationTest.java
old mode 100644
new mode 100755
index b9d3bc3bd4..b0cece3a88
--- a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingSerializationTest.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingSerializationTest.java
@@ -52,16 +52,12 @@ public class GroupingSerializationTest {
             t.assertMatch(new RawBucketResultNode(
                     new RawResultNode(new byte[]{1, 0, 0}),
                     new RawResultNode(new byte[]{1, 1, 0})));
-            t.assertMatch(new IntegerBucketResultNodeVector()
-                    .add(new IntegerBucketResultNode(878, 3246823)));
-            t.assertMatch(new FloatBucketResultNodeVector()
-                    .add(new FloatBucketResultNode(878, 3246823)));
-            t.assertMatch(new StringBucketResultNodeVector()
-                    .add(new StringBucketResultNode("878", "3246823")));
-            t.assertMatch(new RawBucketResultNodeVector()
-                    .add(new RawBucketResultNode(
-                            new RawResultNode(new byte[]{1, 0, 0}),
-                            new RawResultNode(new byte[]{1, 1, 0}))));
+            t.assertMatch(new IntegerBucketResultNode(878, 3246823).add(new IntegerBucketResultNodeVector()));
+            t.assertMatch(new FloatBucketResultNode(878, 3246823).add(new FloatBucketResultNodeVector()));
+            t.assertMatch(new StringBucketResultNode("878", "3246823").add(new StringBucketResultNodeVector()));
+            t.assertMatch(new RawBucketResultNode(
+                    new RawResultNode(new byte[]{1, 0, 0}),
+                    new RawResultNode(new byte[]{1, 1, 0})).add(new RawBucketResultNodeVector()));
         }
 
     }
@@ -171,24 +167,21 @@ public class GroupingSerializationTest {
             t.assertMatch(new VdsHit("100", new byte[0], 50.0));
             t.assertMatch(new VdsHit("100", "rawsummary".getBytes(), 50.0));
             t.assertMatch(new HitsAggregationResult());
-            t.assertMatch(new HitsAggregationResult()
-                    .setMaxHits(5)
-                    .addHit(new FS4Hit(0, createGlobalId(10), 1.0, -1))
+            t.assertMatch(new FS4Hit(0, createGlobalId(10), 1.0, -1).addHit(new HitsAggregationResult()
+                    .setMaxHits(5))
                     .addHit(new FS4Hit(0, createGlobalId(20), 2.0, -1))
                     .addHit(new FS4Hit(0, createGlobalId(30), 3.0, -1))
                     .addHit(new FS4Hit(0, createGlobalId(40), 4.0, -1))
                     .addHit(new FS4Hit(0, createGlobalId(50), 5.0, -1))
                     .setExpression(new ConstantNode(new IntegerResultNode(5))));
-            t.assertMatch(new HitsAggregationResult()
-                    .setMaxHits(3)
-                    .addHit(new FS4Hit(0, createGlobalId(10), 1.0, 100))
+            t.assertMatch(new FS4Hit(0, createGlobalId(10), 1.0, 100).addHit(new HitsAggregationResult()
+                    .setMaxHits(3))
                     .addHit(new FS4Hit(0, createGlobalId(20), 2.0, 200))
                     .addHit(new FS4Hit(0, createGlobalId(30), 3.0, 300))
                     .setExpression(new ConstantNode(new IntegerResultNode(5))));
             //TODO Verify content
-            t.assertMatch(new HitsAggregationResult()
-                    .setMaxHits(3)
-                    .addHit(new VdsHit("10", "100".getBytes(), 1.0))
+            t.assertMatch(new VdsHit("10", "100".getBytes(), 1.0).addHit(new HitsAggregationResult()
+                    .setMaxHits(3))
                     .addHit(new VdsHit("20", "200".getBytes(), 2.0))
                     .addHit(new VdsHit("30", "300".getBytes(), 3.0))
                     .setExpression(new ConstantNode(new IntegerResultNode(5))));
@@ -199,12 +192,11 @@ public class GroupingSerializationTest {
     public void testGroupingLevel() throws IOException {
         try (SerializationTester t = new SerializationTester("testGroupingLevel")) {
             GroupingLevel groupingLevel = new GroupingLevel();
-            groupingLevel.setMaxGroups(100)
-                    .setExpression(createDummyExpression())
-                    .getGroupPrototype()
-                    .addAggregationResult(
-                            new SumAggregationResult()
-                                    .setExpression(createDummyExpression()));
+            new SumAggregationResult()
+                    .setExpression(createDummyExpression()).addAggregationResult(
+                    groupingLevel.setMaxGroups(100)
+                            .setExpression(createDummyExpression())
+                            .getGroupPrototype());
             t.assertMatch(groupingLevel);
         }
     }
@@ -217,10 +209,9 @@ public class GroupingSerializationTest {
                     .setRank(10));
             t.assertMatch(new Group().setId(new IntegerResultNode(100))
                     .addChild(new Group().setId(new IntegerResultNode(110)))
-                    .addChild(new Group().setId(new IntegerResultNode(120))
-                            .setRank(20.5)
-                            .addAggregationResult(new SumAggregationResult()
-                                    .setExpression(createDummyExpression()))
+                    .addChild(new SumAggregationResult()
+                            .setExpression(createDummyExpression()).addAggregationResult(new Group().setId(new IntegerResultNode(120))
+                                    .setRank(20.5))
                             .addAggregationResult(new SumAggregationResult()
                                     .setExpression(createDummyExpression())))
                     .addChild(new Group().setId(new IntegerResultNode(130))
@@ -234,32 +225,28 @@ public class GroupingSerializationTest {
             t.assertMatch(new Grouping());
 
             GroupingLevel level1 = new GroupingLevel();
-            level1.setMaxGroups(100)
-                  .setExpression(createDummyExpression())
-                  .getGroupPrototype()
-                      .addAggregationResult(
-                              new SumAggregationResult()
-                                      .setExpression(createDummyExpression()));
+            new SumAggregationResult()
+                    .setExpression(createDummyExpression()).addAggregationResult(
+                    level1.setMaxGroups(100)
+                          .setExpression(createDummyExpression())
+                          .getGroupPrototype());
             GroupingLevel level2 = new GroupingLevel();
-            level2.setMaxGroups(10)
-                    .setExpression(createDummyExpression())
-                    .getGroupPrototype()
-                        .addAggregationResult(
-                                new SumAggregationResult()
-                                        .setExpression(createDummyExpression()))
+            new SumAggregationResult()
+                    .setExpression(createDummyExpression()).addAggregationResult(
+                    level2.setMaxGroups(10)
+                            .setExpression(createDummyExpression())
+                            .getGroupPrototype())
                         .addAggregationResult(
                                 new SumAggregationResult()
                                         .setExpression(createDummyExpression()));
-            t.assertMatch(new Grouping()
-                    .addLevel(level1)
+            t.assertMatch(level1.addLevel(new Grouping())
                     .addLevel(level2));
 
             GroupingLevel level3 = new GroupingLevel();
-            level3.setExpression(new AttributeNode("folder"))
-                    .getGroupPrototype()
-                    .addAggregationResult(
-                            new XorAggregationResult()
-                                    .setExpression(new MD5BitFunctionNode(new AttributeNode("docid"), 64)))
+            new XorAggregationResult()
+                    .setExpression(new MD5BitFunctionNode(new AttributeNode("docid"), 64)).addAggregationResult(
+                    level3.setExpression(new AttributeNode("folder"))
+                            .getGroupPrototype())
                     .addAggregationResult(
                             new SumAggregationResult()
                                     .setExpression(new MinFunctionNode()
@@ -272,8 +259,7 @@ public class GroupingSerializationTest {
                                                     .addArg(new GetDocIdNamespaceSpecificFunctionNode(new StringResultNode("")))
                                                     .addArg(new DocumentFieldNode("folder"))
                                                     .addArg(new DocumentFieldNode("flags")), 64)));
-            t.assertMatch(new Grouping()
-                    .addLevel(level3));
+            t.assertMatch(level3.addLevel(new Grouping()));
         }
     }
 
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingTestCase.java
old mode 100644
new mode 100755
index fe5405ecb6..85ea96f638
--- a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/GroupingTestCase.java
@@ -129,18 +129,18 @@ public class GroupingTestCase {
         Grouping grouping = new Grouping();
         assertEquals(Collections.emptyList(), grouping.getLevels());
         try {
-            grouping.addLevel(null);
+            null.addLevel(grouping);
             fail();
         } catch (NullPointerException e) {
 
         }
         GroupingLevel level = new GroupingLevel();
-        grouping.addLevel(level);
+        level.addLevel(grouping);
         assertEquals(Arrays.asList(level), grouping.getLevels());
 
         Grouping other = new Grouping();
         assertFalse(grouping.equals(other));
-        other.addLevel(level);
+        level.addLevel(other);
         assertEquals(grouping, other);
 
         assertEquals(grouping, grouping.clone());
@@ -184,8 +184,8 @@ public class GroupingTestCase {
 
     @Test
     public void requireThatNeedDeepResultCollectionWorks() {
-        assertFalse(new Grouping().addLevel(new GroupingLevel().setGroupPrototype(new Group())).needDeepResultCollection());
-        assertTrue(new Grouping().addLevel(new GroupingLevel().setGroupPrototype(new Group().addOrderBy(new CountAggregationResult(9), true))).needDeepResultCollection());
+        assertFalse(new GroupingLevel().setGroupPrototype(new Group()).addLevel(new Grouping()).needDeepResultCollection());
+        assertTrue(new GroupingLevel().setGroupPrototype(new Group().addOrderBy(new CountAggregationResult(9), true)).addLevel(new Grouping()).needDeepResultCollection());
     }
 
     @Test
@@ -193,8 +193,8 @@ public class GroupingTestCase {
         assertFalse(new Grouping().useSinglePass());
         assertFalse(new Grouping().setForceSinglePass(false).useSinglePass());
         assertTrue(new Grouping().setForceSinglePass(true).useSinglePass());
-        assertFalse(new Grouping().addLevel(new GroupingLevel().setGroupPrototype(new Group())).useSinglePass());
-        assertTrue(new Grouping().addLevel(new GroupingLevel().setGroupPrototype(new Group().addOrderBy(new CountAggregationResult(9), true))).useSinglePass());
+        assertFalse(new GroupingLevel().setGroupPrototype(new Group()).addLevel(new Grouping()).useSinglePass());
+        assertTrue(new GroupingLevel().setGroupPrototype(new Group().addOrderBy(new CountAggregationResult(9), true)).addLevel(new Grouping()).useSinglePass());
     }
 
     @Test
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/MergeTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/MergeTestCase.java
index 322bcb426d..c6b949ced5 100755
--- a/searchlib/src/test/java/com/yahoo/searchlib/aggregation/MergeTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/aggregation/MergeTestCase.java
@@ -30,44 +30,35 @@ public class MergeTestCase {
     // Test merging of hits.
     @Test
     public void testMergeHits() {
-        Grouping request = new Grouping()
+        Grouping request = new GroupingLevel().setMaxGroups(69).addLevel(new Grouping()
             .setFirstLevel(0)
-            .setLastLevel(1)
-            .addLevel(new GroupingLevel().setMaxGroups(69));
-
-        Group expect = new Group()
-            .addAggregationResult(new HitsAggregationResult()
-                       .setMaxHits(5)
-                       .addHit(new FS4Hit(30, createGlobalId(30), 30))
-                       .addHit(new FS4Hit(20, createGlobalId(20), 20))
-                       .addHit(new FS4Hit(10, createGlobalId(10), 10))
-                       .addHit(new FS4Hit(5, createGlobalId(9), 9))
-                       .addHit(new FS4Hit(6, createGlobalId(8), 8))
-                       .setExpression(new ConstantNode(new IntegerResultNode(0))));
-
-        Group a = new Group()
-            .addAggregationResult(new HitsAggregationResult()
-                       .setMaxHits(5)
-                       .addHit(new FS4Hit(10, createGlobalId(10), 10))
-                       .addHit(new FS4Hit(1, createGlobalId(5), 5))
-                       .addHit(new FS4Hit(2, createGlobalId(4), 4))
-                       .setExpression(new ConstantNode( new IntegerResultNode(0))));
-
-        Group b = new Group()
-            .addAggregationResult(new HitsAggregationResult()
-                       .setMaxHits(5)
-                       .addHit(new FS4Hit(20, createGlobalId(20), 20))
-                       .addHit(new FS4Hit(3, createGlobalId(7), 7))
-                       .addHit(new FS4Hit(4, createGlobalId(6), 6))
-                       .setExpression(new ConstantNode( new IntegerResultNode(0))));
-
-        Group c = new Group()
-            .addAggregationResult(new HitsAggregationResult()
-                       .setMaxHits(5)
-                       .addHit(new FS4Hit(30, createGlobalId(30), 30))
-                       .addHit(new FS4Hit(5, createGlobalId(9), 9))
-                       .addHit(new FS4Hit(6, createGlobalId(8), 8))
-                       .setExpression(new ConstantNode( new IntegerResultNode(0))));
+            .setLastLevel(1));
+
+        Group expect = new FS4Hit(30, createGlobalId(30), 30).addHit(new HitsAggregationResult()
+                   .setMaxHits(5))
+                   .addHit(new FS4Hit(20, createGlobalId(20), 20))
+                   .addHit(new FS4Hit(10, createGlobalId(10), 10))
+                   .addHit(new FS4Hit(5, createGlobalId(9), 9))
+                   .addHit(new FS4Hit(6, createGlobalId(8), 8))
+                   .setExpression(new ConstantNode(new IntegerResultNode(0))).addAggregationResult(new Group());
+
+        Group a = new FS4Hit(10, createGlobalId(10), 10).addHit(new HitsAggregationResult()
+                   .setMaxHits(5))
+                   .addHit(new FS4Hit(1, createGlobalId(5), 5))
+                   .addHit(new FS4Hit(2, createGlobalId(4), 4))
+                   .setExpression(new ConstantNode( new IntegerResultNode(0))).addAggregationResult(new Group());
+
+        Group b = new FS4Hit(20, createGlobalId(20), 20).addHit(new HitsAggregationResult()
+                   .setMaxHits(5))
+                   .addHit(new FS4Hit(3, createGlobalId(7), 7))
+                   .addHit(new FS4Hit(4, createGlobalId(6), 6))
+                   .setExpression(new ConstantNode( new IntegerResultNode(0))).addAggregationResult(new Group());
+
+        Group c = new FS4Hit(30, createGlobalId(30), 30).addHit(new HitsAggregationResult()
+                   .setMaxHits(5))
+                   .addHit(new FS4Hit(5, createGlobalId(9), 9))
+                   .addHit(new FS4Hit(6, createGlobalId(8), 8))
+                   .setExpression(new ConstantNode( new IntegerResultNode(0))).addAggregationResult(new Group());
 
         assertMerge(request, a, b, c, expect);
         assertMerge(request, a, c, b, expect);
@@ -81,21 +72,18 @@ public class MergeTestCase {
     @Test
     public void testMergeSimpleSum() {
         Grouping lhs = new Grouping()
-            .setRoot(new Group()
-                     .addAggregationResult(new SumAggregationResult()
-                                .setSum(new IntegerResultNode(20))
-                                .setExpression(new AttributeNode("foo"))));
+            .setRoot(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(20))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()));
 
         Grouping rhs = new Grouping()
-            .setRoot(new Group()
-                     .addAggregationResult(new SumAggregationResult()
-                                .setSum(new IntegerResultNode(30))
-                                .setExpression(new AttributeNode("foo"))));
+            .setRoot(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(30))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()));
 
-        Group expect = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(50))
-                       .setExpression(new AttributeNode("foo")));
+        Group expect = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(50))
+                   .setExpression(new AttributeNode("foo")).addAggregationResult(new Group());
 
         assertMerge(lhs, rhs, expect);
     }
@@ -106,26 +94,23 @@ public class MergeTestCase {
         Grouping lhs = new Grouping()
             .setFirstLevel(0)
             .setLastLevel(1)
-            .setRoot(new Group().addChild(new Group()
-                                          .setId(new StringResultNode("foo"))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(20))
-                                                     .setExpression(new AttributeNode("foo")))));
+            .setRoot(new Group().addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(20))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                                     .setId(new StringResultNode("foo")))));
 
         Grouping rhs = new Grouping()
             .setFirstLevel(0)
             .setLastLevel(1)
-            .setRoot(new Group().addChild(new Group()
-                                          .setId(new StringResultNode("foo"))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(30))
-                                                     .setExpression(new AttributeNode("foo")))));
-
-        Group expect = new Group().addChild(new Group()
-                                            .setId(new StringResultNode("foo"))
-                                            .addAggregationResult(new SumAggregationResult()
-                                                       .setSum(new IntegerResultNode(50))
-                                                       .setExpression(new AttributeNode("foo"))));
+            .setRoot(new Group().addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(30))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                                     .setId(new StringResultNode("foo")))));
+
+        Group expect = new Group().addChild(new SumAggregationResult()
+                   .setSum(new IntegerResultNode(50))
+                   .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                                       .setId(new StringResultNode("foo"))));
 
         assertMerge(lhs, rhs, expect);
     }
@@ -137,48 +122,41 @@ public class MergeTestCase {
             .setFirstLevel(0)
             .setLastLevel(1)
             .setRoot(new Group()
-                     .addChild(new Group()
-                               .setId(new StringResultNode("foo"))
-                               .addAggregationResult(new SumAggregationResult()
-                                          .setSum(new IntegerResultNode(20))
-                                          .setExpression(new AttributeNode("foo"))))
-                     .addChild(new Group()
-                               .setId(new StringResultNode("bar"))
-                               .addAggregationResult(new SumAggregationResult()
-                                          .setSum(new IntegerResultNode(40))
-                                          .setExpression(new AttributeNode("foo")))));
+                     .addChild(new SumAggregationResult()
+                                .setSum(new IntegerResultNode(20))
+                                .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                          .setId(new StringResultNode("foo"))))
+                     .addChild(new SumAggregationResult()
+                                .setSum(new IntegerResultNode(40))
+                                .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                          .setId(new StringResultNode("bar")))));
 
         Grouping rhs = new Grouping()
             .setFirstLevel(0)
             .setLastLevel(1)
             .setRoot(new Group()
-                     .addChild(new Group()
-                               .setId(new StringResultNode("foo"))
-                               .addAggregationResult(new SumAggregationResult()
-                                          .setSum(new IntegerResultNode(30))
-                                          .setExpression(new AttributeNode("foo"))))
-                     .addChild(new Group()
-                               .setId(new StringResultNode("baz"))
-                               .addAggregationResult(new SumAggregationResult()
-                                          .setSum(new IntegerResultNode(30))
-                                          .setExpression(new AttributeNode("foo")))));
+                     .addChild(new SumAggregationResult()
+                                .setSum(new IntegerResultNode(30))
+                                .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                          .setId(new StringResultNode("foo"))))
+                     .addChild(new SumAggregationResult()
+                                .setSum(new IntegerResultNode(30))
+                                .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                          .setId(new StringResultNode("baz")))));
 
         Group expect = new Group().addChild(
-            new Group()
-            .setId(new StringResultNode("foo"))
-            .addAggregationResult(new SumAggregationResult()
+            new SumAggregationResult()
                        .setSum(new IntegerResultNode(50))
-                       .setExpression(new AttributeNode("foo"))))
-            .addChild(new Group()
-                      .setId(new StringResultNode("bar"))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(40))
-                                 .setExpression(new AttributeNode("foo"))))
-            .addChild(new Group()
-                      .setId(new StringResultNode("baz"))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(30))
-                                 .setExpression(new AttributeNode("foo"))));
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                       .setId(new StringResultNode("foo"))))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(40))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                 .setId(new StringResultNode("bar"))))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(30))
+                       .setExpression(new AttributeNode("foo")).addAggregationResult(new Group()
+                                 .setId(new StringResultNode("baz"))));
 
         assertMerge(lhs, rhs, expect);
     }
@@ -186,159 +164,130 @@ public class MergeTestCase {
     // Verify that frozen levels are not touched during merge.
     @Test
     public void testMergeLevels() {
-        Grouping request = new Grouping()
-            .addLevel(new GroupingLevel()
-                      .setExpression(new AttributeNode("c1"))
-                      .setGroupPrototype(new Group().addAggregationResult(
-                              new SumAggregationResult().setExpression(new AttributeNode("s1")))))
+        Grouping request = new GroupingLevel()
+                  .setExpression(new AttributeNode("c1"))
+                  .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s1")).addAggregationResult(
+                          new Group())).addLevel(new Grouping())
             .addLevel(new GroupingLevel()
                       .setExpression(new AttributeNode("c2"))
-                      .setGroupPrototype(new Group().addAggregationResult(
-                              new SumAggregationResult().setExpression(new AttributeNode("s2")))))
+                      .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s2")).addAggregationResult(
+                              new Group())))
             .addLevel(new GroupingLevel()
                       .setExpression(new AttributeNode("c3"))
-                      .setGroupPrototype(new Group().addAggregationResult(
-                              new SumAggregationResult().setExpression(new AttributeNode("s3")))));
-
-        Group lhs = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(10))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(15))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(20))
-                                                     .setExpression(new AttributeNode("s3"))))));
+                      .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s3")).addAggregationResult(
+                              new Group())));
 
-        Group rhs = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(10))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(15))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(20))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expectAll = new Group()
-            .addAggregationResult(new SumAggregationResult()
+        Group lhs = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
                        .setSum(new IntegerResultNode(10))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(20))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(30))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(40))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expect0 = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(20))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(30))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(40))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expect1 = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(10))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(30))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(40))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expect2 = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(10))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(15))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(40))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expect3 = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(5))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(10))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(15))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(30))
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(20))
-                                                     .setExpression(new AttributeNode("s3"))))));
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(15))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(20))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group rhs = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(10))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(15))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(20))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group expectAll = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(10))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(20))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(30))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(40))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group expect0 = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(20))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(30))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(40))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group expect1 = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(10))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(30))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(40))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group expect2 = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(10))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(15))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(40))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
+
+        Group expect3 = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(5))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(10))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10)))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(15))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20)))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(20))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(30))))));
 
         request.setFirstLevel(0).setLastLevel(3);
         assertMerge(request, lhs, rhs, expectAll);
@@ -356,9 +305,8 @@ public class MergeTestCase {
     // highest ranked ones, and that they are sorted by group id.
     @Test
     public void testMergeGroups() {
-        Grouping request = new Grouping()
-            .addLevel(new GroupingLevel()
-                      .setExpression(new AttributeNode("attr")));
+        Grouping request = new GroupingLevel()
+                  .setExpression(new AttributeNode("attr")).addLevel(new Grouping());
         Group lhs = new Group()
             .addChild(new Group().setId(new IntegerResultNode(5)).setRank(5))
             .addChild(new Group().setId(new IntegerResultNode(10)).setRank(5))
@@ -412,28 +360,22 @@ public class MergeTestCase {
     public void testMergeBuckets() {
           Grouping lhs = new Grouping()
                 .setRoot(new Group().setTag(0)
-                                    .addChild(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(1))
+                                    .addChild(new CountAggregationResult().setCount(1).addAggregationResult(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4)))
                                                          .setTag(1))
-                                    .addChild(new Group().setId(new FloatBucketResultNode(0, 0))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(12))
+                                    .addChild(new CountAggregationResult().setCount(12).addAggregationResult(new Group().setId(new FloatBucketResultNode(0, 0)))
                                                          .setTag(1)));
 
           Grouping rhs = new Grouping()
                 .setRoot(new Group().setTag(0)
-                                    .addChild(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(0))
+                                    .addChild(new CountAggregationResult().setCount(0).addAggregationResult(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4)))
                                                          .setTag(1))
-                                    .addChild(new Group().setId(new FloatBucketResultNode(0, 0))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(15))
+                                    .addChild(new CountAggregationResult().setCount(15).addAggregationResult(new Group().setId(new FloatBucketResultNode(0, 0)))
                                                          .setTag(1)));
 
           Group expected = new Group().setTag(0)
-                                    .addChild(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(1))
+                                    .addChild(new CountAggregationResult().setCount(1).addAggregationResult(new Group().setId(new FloatBucketResultNode(FloatResultNode.getNegativeInfinity().getFloat(), 0.4)))
                                                          .setTag(1))
-                                    .addChild(new Group().setId(new FloatBucketResultNode(0, 0))
-                                                         .addAggregationResult(new CountAggregationResult().setCount(27))
+                                    .addChild(new CountAggregationResult().setCount(27).addAggregationResult(new Group().setId(new FloatBucketResultNode(0, 0)))
                                                          .setTag(1));
           assertMerge(lhs, rhs, expected);
     }
@@ -441,36 +383,30 @@ public class MergeTestCase {
     // Merge two trees that are ordered by an expression, and verify that the resulting order after merge is correct.
     @Test
     public void testMergeExpressions() {
-        Grouping a = new Grouping()
+        Grouping a = new GroupingLevel().setMaxGroups(1).addLevel(new Grouping()
                 .setFirstLevel(0)
-                .setLastLevel(1)
-                .addLevel(new GroupingLevel().setMaxGroups(1))
+                .setLastLevel(1))
                 .setRoot(new Group()
-                         .addChild(new Group().setId(new StringResultNode("aa"))
-                                       .addAggregationResult(new MaxAggregationResult().setMax(new IntegerResultNode(9)))
+                         .addChild(new MaxAggregationResult().setMax(new IntegerResultNode(9)).addAggregationResult(new Group().setId(new StringResultNode("aa")))
                                        .addAggregationResult(new CountAggregationResult().setCount(2))
                                        .addOrderBy(new MultiplyFunctionNode().addArg(new AggregationRefNode(0))
                                                                              .addArg(new AggregationRefNode(1)), true)));
-        Grouping b = new Grouping()
+        Grouping b = new GroupingLevel().setMaxGroups(1).addLevel(new Grouping()
                 .setFirstLevel(0)
-                .setLastLevel(1)
-                .addLevel(new GroupingLevel().setMaxGroups(1))
+                .setLastLevel(1))
                 .setRoot(new Group()
-                         .addChild(new Group().setId(new StringResultNode("ab"))
-                                       .addAggregationResult(new MaxAggregationResult().setMax(
-                                               new IntegerResultNode(12)))
+                         .addChild(new MaxAggregationResult().setMax(
+                                 new IntegerResultNode(12)).addAggregationResult(new Group().setId(new StringResultNode("ab")))
                                        .addAggregationResult(new CountAggregationResult().setCount(1))
                                        .addOrderBy(new MultiplyFunctionNode().addArg(new AggregationRefNode(0))
                                                                              .addArg(new AggregationRefNode(1)), true)));
 
-        Grouping expected = new Grouping()
+        Grouping expected = new GroupingLevel().setMaxGroups(1).addLevel(new Grouping()
                 .setFirstLevel(0)
-                .setLastLevel(1)
-                .addLevel(new GroupingLevel().setMaxGroups(1))
+                .setLastLevel(1))
                 .setRoot(new Group()
-                         .addChild(new Group().setId(new StringResultNode("ab"))
-                                       .addAggregationResult(new MaxAggregationResult().setMax(
-                                               new IntegerResultNode(12)))
+                         .addChild(new MaxAggregationResult().setMax(
+                                 new IntegerResultNode(12)).addAggregationResult(new Group().setId(new StringResultNode("ab")))
                                        .addAggregationResult(new CountAggregationResult().setCount(1))
                                        .addOrderBy(new MultiplyFunctionNode().addArg(new AggregationRefNode(0))
                                                                              .addArg(new AggregationRefNode(1)), true)));
@@ -484,241 +420,206 @@ public class MergeTestCase {
     // Merge two relatively complex tree structures and verify that the end result is as expected.
     @Test
     public void testMergeTrees() {
-        Grouping request = new Grouping()
-            .addLevel(new GroupingLevel()
-                      .setMaxGroups(3)
-                      .setExpression(new AttributeNode("c1"))
-                      .setGroupPrototype(new Group().addAggregationResult(
-                              new SumAggregationResult().setExpression(new AttributeNode("s1")))))
+        Grouping request = new GroupingLevel()
+                  .setMaxGroups(3)
+                  .setExpression(new AttributeNode("c1"))
+                  .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s1")).addAggregationResult(
+                          new Group())).addLevel(new Grouping())
             .addLevel(new GroupingLevel()
                               .setMaxGroups(2)
                               .setExpression(new AttributeNode("c2"))
-                              .setGroupPrototype(new Group().addAggregationResult(
-                                      new SumAggregationResult().setExpression(new AttributeNode("s2")))))
+                              .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s2")).addAggregationResult(
+                                      new Group())))
             .addLevel(new GroupingLevel()
                               .setMaxGroups(1)
                               .setExpression(new AttributeNode("c3"))
-                              .setGroupPrototype(new Group().addAggregationResult(
-                                      new SumAggregationResult().setExpression(new AttributeNode("s3")))));
+                              .setGroupPrototype(new SumAggregationResult().setExpression(new AttributeNode("s3")).addAggregationResult(
+                                      new Group())));
 
-        Group lhs = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(100))
-                       .setExpression(new AttributeNode("s0")))
+        Group lhs = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(100))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
             .addChild(new Group().setId(new IntegerResultNode(4)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(5))
-                      .setRank(5) // merged with 200 rank node
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(5))
+                                 .setRank(5))
                       .addChild(new Group().setId(new IntegerResultNode(4)).setRank(10))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(5))
-                                .setRank(500)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(5))
+                                           .setRank(500))
                                 .addChild(new Group().setId(new IntegerResultNode(4)).setRank(10))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(5))
-                                          .setRank(200)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(5))
+                                                     .setRank(200)))))
             .addChild(new Group().setId(new IntegerResultNode(9)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .setRank(100)
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10))
+                                 .setRank(100))
                       // dummy child would be picked up here
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(15))
-                                .setRank(200)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(15))
+                                           .setRank(200))
                                 .addChild(new Group().setId(new IntegerResultNode(14)).setRank(10))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(15))
-                                          .setRank(300)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(15))
+                                                     .setRank(300)))))
             .addChild(new Group().setId(new IntegerResultNode(14)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(15))
-                      .setRank(300)
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(15))
+                                 .setRank(300))
                       .addChild(new Group().setId(new IntegerResultNode(19)).setRank(10))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .setRank(100)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))));
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20))
+                                           .setRank(100))));
 
-        Group rhs = new Group()
-            .addAggregationResult(new SumAggregationResult()
-                       .setSum(new IntegerResultNode(100))
-                       .setExpression(new AttributeNode("s0")))
+        Group rhs = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(100))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
             .addChild(new Group().setId(new IntegerResultNode(4)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(5))
-                      .setRank(200)
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(5))
+                                 .setRank(200))
                       .addChild(new Group().setId(new IntegerResultNode(9)).setRank(10))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(10))
-                                .setRank(400)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(10))
+                                           .setRank(400))
                                 .addChild(new Group().setId(new IntegerResultNode(9)).setRank(10))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(10))
-                                          .setRank(100)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(10))
+                                                     .setRank(100)))))
             .addChild(new Group().setId(new IntegerResultNode(9)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .setRank(100)
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10))
+                                 .setRank(100))
                       // dummy child would be picket up here
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(15))
-                                .setRank(200)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))))
-            .addChild(new Group().setId(new IntegerResultNode(14)).setRank(10))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(15))
-                      .setRank(5) // merged with 300 rank node
-                      .addAggregationResult(new SumAggregationResult()
+                      .addChild(new SumAggregationResult()
                                  .setSum(new IntegerResultNode(100))
-                                 .setExpression(new AttributeNode("s1")))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(15))
+                                           .setRank(200))))
+            .addChild(new Group().setId(new IntegerResultNode(14)).setRank(10))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(100))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(15))
+                                 .setRank(5))
                       .addChild(new Group().setId(new IntegerResultNode(19)).setRank(10))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .setRank(5) // merged with 100 rank node
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20))
+                                           .setRank(5))
                                 .addChild(new Group().setId(new IntegerResultNode(19)).setRank(10))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(20))
-                                          .setRank(500)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3")))))
-                      .addChild(new Group().setId(new IntegerResultNode(24)).setRank(10))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(25))
-                                .setRank(300)
-                                .addAggregationResult(new SumAggregationResult()
+                                .addChild(new SumAggregationResult()
                                            .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(20))
+                                                     .setRank(500))))
+                      .addChild(new Group().setId(new IntegerResultNode(24)).setRank(10))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(25))
+                                           .setRank(300))
                                 .addChild(new Group().setId(new IntegerResultNode(24)).setRank(10))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(25))
-                                          .setRank(400)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))));
-
-        Group expect = new Group()
-            .addAggregationResult(new SumAggregationResult()
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(25))
+                                                     .setRank(400)))));
+
+        Group expect = new SumAggregationResult()
+                   .setSum(new IntegerResultNode(200))
+                   .setExpression(new AttributeNode("s0")).addAggregationResult(new Group())
+            .addChild(new SumAggregationResult()
                        .setSum(new IntegerResultNode(200))
-                       .setExpression(new AttributeNode("s0")))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(5))
-                      .setRank(200)
-                      .addAggregationResult(new SumAggregationResult()
-                                 .setSum(new IntegerResultNode(200))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(5))
-                                .setRank(500)
-                                .addAggregationResult(new SumAggregationResult()
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(5))
+                                 .setRank(200))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(5))
+                                           .setRank(500))
+                                .addChild(new SumAggregationResult()
                                            .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(5))
-                                          .setRank(200)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3")))))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(10))
-                                .setRank(400)
-                                .addAggregationResult(new SumAggregationResult()
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(5))
+                                                     .setRank(200))))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(10))
+                                           .setRank(400))
+                                .addChild(new SumAggregationResult()
                                            .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(10))
-                                          .setRank(100)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(10))
-                      .setRank(100)
-                      .addAggregationResult(new SumAggregationResult()
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(10))
+                                                     .setRank(100)))))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(200))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(10))
+                                 .setRank(100))
+                      .addChild(new SumAggregationResult()
                                  .setSum(new IntegerResultNode(200))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(15))
-                                .setRank(200)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(200))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(15))
-                                          .setRank(300)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))))
-            .addChild(new Group()
-                      .setId(new IntegerResultNode(15))
-                      .setRank(300)
-                      .addAggregationResult(new SumAggregationResult()
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(15))
+                                           .setRank(200))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(15))
+                                                     .setRank(300)))))
+            .addChild(new SumAggregationResult()
+                       .setSum(new IntegerResultNode(200))
+                       .setExpression(new AttributeNode("s1")).addAggregationResult(new Group()
+                                 .setId(new IntegerResultNode(15))
+                                 .setRank(300))
+                      .addChild(new SumAggregationResult()
                                  .setSum(new IntegerResultNode(200))
-                                 .setExpression(new AttributeNode("s1")))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(20))
-                                .setRank(100)
-                                .addAggregationResult(new SumAggregationResult()
-                                           .setSum(new IntegerResultNode(200))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(20))
-                                          .setRank(500)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3")))))
-                      .addChild(new Group()
-                                .setId(new IntegerResultNode(25))
-                                .setRank(300)
-                                .addAggregationResult(new SumAggregationResult()
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(20))
+                                           .setRank(100))
+                                .addChild(new SumAggregationResult()
+                                           .setSum(new IntegerResultNode(100))
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(20))
+                                                     .setRank(500))))
+                      .addChild(new SumAggregationResult()
+                                 .setSum(new IntegerResultNode(100))
+                                 .setExpression(new AttributeNode("s2")).addAggregationResult(new Group()
+                                           .setId(new IntegerResultNode(25))
+                                           .setRank(300))
+                                .addChild(new SumAggregationResult()
                                            .setSum(new IntegerResultNode(100))
-                                           .setExpression(new AttributeNode("s2")))
-                                .addChild(new Group()
-                                          .setId(new IntegerResultNode(25))
-                                          .setRank(400)
-                                          .addAggregationResult(new SumAggregationResult()
-                                                     .setSum(new IntegerResultNode(100))
-                                                     .setExpression(new AttributeNode("s3"))))));
+                                           .setExpression(new AttributeNode("s3")).addAggregationResult(new Group()
+                                                     .setId(new IntegerResultNode(25))
+                                                     .setRank(400)))));
 
         assertMerge(request, lhs, rhs, expect);
         assertMerge(request, rhs, lhs, expect);
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/expression/ExpressionTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/expression/ExpressionTestCase.java
old mode 100644
new mode 100755
index d282dc17aa..15fafefd90
--- a/searchlib/src/test/java/com/yahoo/searchlib/expression/ExpressionTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/expression/ExpressionTestCase.java
@@ -24,14 +24,14 @@ public class ExpressionTestCase {
 
     @Test
     public void testRangeBucketPreDefFunctionNode() {
-        assertMultiArgFunctionNode(new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("foo")));
+        assertMultiArgFunctionNode(new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("foo")));
         assertEquals(new RangeBucketPreDefFunctionNode(), new RangeBucketPreDefFunctionNode());
-        assertEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("foo")),
-                     new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("foo")));
-        assertNotEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("foo")),
-                        new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "21")), new AttributeNode("foo")));
-        assertNotEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("foo")),
-                        new RangeBucketPreDefFunctionNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")), new AttributeNode("bar")));
+        assertEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("foo")),
+                     new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("foo")));
+        assertNotEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("foo")),
+                        new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "21").add(new StringBucketResultNodeVector()), new AttributeNode("foo")));
+        assertNotEquals(new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("foo")),
+                        new RangeBucketPreDefFunctionNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()), new AttributeNode("bar")));
     }
 
     @Test
@@ -48,35 +48,35 @@ public class ExpressionTestCase {
 
     @Test
     public void testIntegerBucketResultNodeVector() {
-        assertResultNode(new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(10, 20)));
-        assertEquals(new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(10, 20)),
-                     new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(10, 20)));
-        assertNotEquals(new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(10, 20)),
+        assertResultNode(new IntegerBucketResultNode(10, 20).add(new IntegerBucketResultNodeVector()));
+        assertEquals(new IntegerBucketResultNode(10, 20).add(new IntegerBucketResultNodeVector()),
+                     new IntegerBucketResultNode(10, 20).add(new IntegerBucketResultNodeVector()));
+        assertNotEquals(new IntegerBucketResultNode(10, 20).add(new IntegerBucketResultNodeVector()),
                         new IntegerBucketResultNodeVector());
-        assertNotEquals(new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(10, 20)),
-                        new IntegerBucketResultNodeVector().add(new IntegerBucketResultNode(11, 20)));
+        assertNotEquals(new IntegerBucketResultNode(10, 20).add(new IntegerBucketResultNodeVector()),
+                        new IntegerBucketResultNode(11, 20).add(new IntegerBucketResultNodeVector()));
     }
 
     @Test
     public void testFloatBucketResultNodeVector() {
-        assertResultNode(new FloatBucketResultNodeVector().add(new FloatBucketResultNode(10, 20)));
-        assertEquals(new FloatBucketResultNodeVector().add(new FloatBucketResultNode(10, 20)),
-                     new FloatBucketResultNodeVector().add(new FloatBucketResultNode(10, 20)));
-        assertNotEquals(new FloatBucketResultNodeVector().add(new FloatBucketResultNode(10, 20)),
+        assertResultNode(new FloatBucketResultNode(10, 20).add(new FloatBucketResultNodeVector()));
+        assertEquals(new FloatBucketResultNode(10, 20).add(new FloatBucketResultNodeVector()),
+                     new FloatBucketResultNode(10, 20).add(new FloatBucketResultNodeVector()));
+        assertNotEquals(new FloatBucketResultNode(10, 20).add(new FloatBucketResultNodeVector()),
                         new FloatBucketResultNodeVector());
-        assertNotEquals(new FloatBucketResultNodeVector().add(new FloatBucketResultNode(10, 20)),
-                        new FloatBucketResultNodeVector().add(new FloatBucketResultNode(11, 20)));
+        assertNotEquals(new FloatBucketResultNode(10, 20).add(new FloatBucketResultNodeVector()),
+                        new FloatBucketResultNode(11, 20).add(new FloatBucketResultNodeVector()));
     }
 
     @Test
     public void testStringBucketResultNodeVector() {
-        assertResultNode(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")));
-        assertEquals(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")),
-                     new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")));
-        assertNotEquals(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")),
+        assertResultNode(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()));
+        assertEquals(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()),
+                     new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()));
+        assertNotEquals(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()),
                         new StringBucketResultNodeVector());
-        assertNotEquals(new StringBucketResultNodeVector().add(new StringBucketResultNode("10", "20")),
-                        new StringBucketResultNodeVector().add(new StringBucketResultNode("11", "20")));
+        assertNotEquals(new StringBucketResultNode("10", "20").add(new StringBucketResultNodeVector()),
+                        new StringBucketResultNode("11", "20").add(new StringBucketResultNodeVector()));
     }
 
     @Test
diff --git a/searchlib/src/test/java/com/yahoo/searchlib/expression/ResultNodeVectorTestCase.java b/searchlib/src/test/java/com/yahoo/searchlib/expression/ResultNodeVectorTestCase.java
old mode 100644
new mode 100755
index 2fc1771ece..fe95883f7d
--- a/searchlib/src/test/java/com/yahoo/searchlib/expression/ResultNodeVectorTestCase.java
+++ b/searchlib/src/test/java/com/yahoo/searchlib/expression/ResultNodeVectorTestCase.java
@@ -1,7 +1,6 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.searchlib.expression;
 
-import com.yahoo.vespa.objects.BufferSerializer;
 import org.junit.Test;
 
 import java.util.List;
@@ -29,71 +28,71 @@ public class ResultNodeVectorTestCase extends ResultNodeTest {
     @Test
     public void testVectorAdd() {
         BoolResultNodeVector b = new BoolResultNodeVector();
-        b.add(new BoolResultNode(true));
-        b.add(new BoolResultNode(false));
+        new BoolResultNode(true).add(b);
+        new BoolResultNode(false).add(b);
         b.add((ResultNode)new BoolResultNode(false));
         assertThat(b.getVector().size(), is(3));
 
         Int8ResultNodeVector i8 = new Int8ResultNodeVector();
-        i8.add(new Int8ResultNode((byte)9));
-        i8.add(new Int8ResultNode((byte)2));
+        new Int8ResultNode((byte)9).addOther(i8);
+        new Int8ResultNode((byte)2).addOther(i8);
         i8.add((ResultNode)new Int8ResultNode((byte)5));
         assertThat(i8.getVector().size(), is(3));
 
         Int16ResultNodeVector i16 = new Int16ResultNodeVector();
-        i16.add(new Int16ResultNode((short)9));
-        i16.add(new Int16ResultNode((short)2));
+        new Int16ResultNode((short)9).addOther(i16);
+        new Int16ResultNode((short)2).addOther(i16);
         i16.add((ResultNode)new Int16ResultNode((short)5));
         assertThat(i16.getVector().size(), is(3));
 
         Int32ResultNodeVector i32 = new Int32ResultNodeVector();
-        i32.add(new Int32ResultNode(9));
-        i32.add(new Int32ResultNode(2));
+        new Int32ResultNode(9).addOther(i32);
+        new Int32ResultNode(2).addOther(i32);
         i32.add((ResultNode)new Int32ResultNode(5));
         assertThat(i32.getVector().size(), is(3));
 
         IntegerResultNodeVector ieger = new IntegerResultNodeVector();
-        ieger.add(new IntegerResultNode(9));
-        ieger.add(new IntegerResultNode(2));
+        new IntegerResultNode(9).addOther(ieger);
+        new IntegerResultNode(2).addOther(ieger);
         ieger.add((ResultNode)new IntegerResultNode(5));
         assertThat(ieger.getVector().size(), is(3));
 
         FloatResultNodeVector floatvec = new FloatResultNodeVector();
-        floatvec.add(new FloatResultNode(3.3));
-        floatvec.add(new FloatResultNode(3.4));
+        new FloatResultNode(3.3).addOther(floatvec);
+        new FloatResultNode(3.4).addOther(floatvec);
         floatvec.add((ResultNode)new FloatResultNode(3.5));
         assertThat(floatvec.getVector().size(), is(3));
     }
 
     @Test
     public void testCmp() {
-        ResultNodeVector int8vec = new Int8ResultNodeVector().add(new Int8ResultNode((byte) 2));
-        ResultNodeVector int8veclarge = new Int8ResultNodeVector().add(new Int8ResultNode((byte) 2)).add(new Int8ResultNode((byte) 5));
-        ResultNodeVector int8vecsmall = new Int8ResultNodeVector().add(new Int8ResultNode((byte) 1));
+        ResultNodeVector int8vec = new Int8ResultNode((byte) 2).addOther(new Int8ResultNodeVector());
+        ResultNodeVector int8veclarge = new Int8ResultNode((byte) 2).addOther(new Int8ResultNodeVector()).addOther(new Int8ResultNode((byte) 5));
+        ResultNodeVector int8vecsmall = new Int8ResultNode((byte) 1).addOther(new Int8ResultNodeVector());
 
-        ResultNodeVector int16vec = new Int16ResultNodeVector().add(new Int16ResultNode((short) 2));
-        ResultNodeVector int16veclarge = new Int16ResultNodeVector().add(new Int16ResultNode((short) 2)).add(new Int16ResultNode((short) 5));
-        ResultNodeVector int16vecsmall = new Int16ResultNodeVector().add(new Int16ResultNode((short) 1));
+        ResultNodeVector int16vec = new Int16ResultNode((short) 2).addOther(new Int16ResultNodeVector());
+        ResultNodeVector int16veclarge = new Int16ResultNode((short) 2).addOther(new Int16ResultNodeVector()).addOther(new Int16ResultNode((short) 5));
+        ResultNodeVector int16vecsmall = new Int16ResultNode((short) 1).addOther(new Int16ResultNodeVector());
 
-        ResultNodeVector int32vec = new Int32ResultNodeVector().add(new Int32ResultNode(2));
-        ResultNodeVector int32veclarge = new Int32ResultNodeVector().add(new Int32ResultNode(2)).add(new Int32ResultNode(5));
-        ResultNodeVector int32vecsmall = new Int32ResultNodeVector().add(new Int32ResultNode(1));
+        ResultNodeVector int32vec = new Int32ResultNode(2).addOther(new Int32ResultNodeVector());
+        ResultNodeVector int32veclarge = new Int32ResultNode(2).addOther(new Int32ResultNodeVector()).addOther(new Int32ResultNode(5));
+        ResultNodeVector int32vecsmall = new Int32ResultNode(1).addOther(new Int32ResultNodeVector());
 
-        ResultNodeVector intvec = new IntegerResultNodeVector().add(new IntegerResultNode(2));
-        ResultNodeVector intveclarge = new IntegerResultNodeVector().add(new IntegerResultNode(2)).add(new IntegerResultNode(5));
-        ResultNodeVector intvecsmall = new IntegerResultNodeVector().add(new IntegerResultNode(1));
+        ResultNodeVector intvec = new IntegerResultNode(2).addOther(new IntegerResultNodeVector());
+        ResultNodeVector intveclarge = new IntegerResultNode(2).addOther(new IntegerResultNodeVector()).addOther(new IntegerResultNode(5));
+        ResultNodeVector intvecsmall = new IntegerResultNode(1).addOther(new IntegerResultNodeVector());
 
-        FloatResultNodeVector floatvec = new FloatResultNodeVector().add(new FloatResultNode(2.2));
-        FloatResultNodeVector floatveclarge = new FloatResultNodeVector().add(new FloatResultNode(2.2)).add(new FloatResultNode(5.5));
-        FloatResultNodeVector floatvecsmall = new FloatResultNodeVector().add(new FloatResultNode(1.2));
+        FloatResultNodeVector floatvec = new FloatResultNode(2.2).addOther(new FloatResultNodeVector());
+        FloatResultNodeVector floatveclarge = new FloatResultNode(2.2).addOther(new FloatResultNodeVector()).addOther(new FloatResultNode(5.5));
+        FloatResultNodeVector floatvecsmall = new FloatResultNode(1.2).addOther(new FloatResultNodeVector());
 
-        StringResultNodeVector strvec  = new StringResultNodeVector().add(new StringResultNode("foo"));
-        StringResultNodeVector strveclarge  = new StringResultNodeVector().add(new StringResultNode("foolio"));
-        StringResultNodeVector strvecsmall  = new StringResultNodeVector().add(new StringResultNode("bario"));
+        StringResultNodeVector strvec  = new StringResultNode("foo").addOther(new StringResultNodeVector());
+        StringResultNodeVector strveclarge  = new StringResultNode("foolio").addOther(new StringResultNodeVector());
+        StringResultNodeVector strvecsmall  = new StringResultNode("bario").addOther(new StringResultNodeVector());
 
-        RawResultNodeVector rawvec = new RawResultNodeVector().add(new RawResultNode(new byte[]{6, 9}));
-        RawResultNodeVector rawveclarge = new RawResultNodeVector().add(new RawResultNode(new byte[]{9, 6}));
-        RawResultNodeVector rawvecsmall = new RawResultNodeVector().add(new RawResultNode(new byte[]{6, 6}));
+        RawResultNodeVector rawvec = new RawResultNode(new byte[]{6, 9}).addOther(new RawResultNodeVector());
+        RawResultNodeVector rawveclarge = new RawResultNode(new byte[]{9, 6}).addOther(new RawResultNodeVector());
+        RawResultNodeVector rawvecsmall = new RawResultNode(new byte[]{6, 6}).addOther(new RawResultNodeVector());
 
         assertClassCmp(int8vec);
         assertClassCmp(int16vec);
@@ -164,12 +163,12 @@ public class ResultNodeVectorTestCase extends ResultNodeTest {
 
     @Test
     public void testSerialize() throws InstantiationException, IllegalAccessException {
-        assertCorrectSerialization(new FloatResultNodeVector().add(new FloatResultNode(1.1)).add(new FloatResultNode(3.3)), new FloatResultNodeVector());
-        assertCorrectSerialization(new IntegerResultNodeVector().add(new IntegerResultNode(1)).add(new IntegerResultNode(3)), new IntegerResultNodeVector());
-        assertCorrectSerialization(new Int16ResultNodeVector().add(new Int16ResultNode((short) 1)).add(new Int16ResultNode((short) 3)), new Int16ResultNodeVector());
-        assertCorrectSerialization(new Int8ResultNodeVector().add(new Int8ResultNode((byte) 1)).add(new Int8ResultNode((byte) 3)), new Int8ResultNodeVector());
-        assertCorrectSerialization(new StringResultNodeVector().add(new StringResultNode("foo")).add(new StringResultNode("bar")), new StringResultNodeVector());
-        assertCorrectSerialization(new RawResultNodeVector().add(new RawResultNode(new byte[]{6, 9})).add(new RawResultNode(new byte[]{9, 6})), new RawResultNodeVector());
-        assertCorrectSerialization(new BoolResultNodeVector().add(new BoolResultNode(true)).add(new BoolResultNode(false)), new BoolResultNodeVector());
+        assertCorrectSerialization(new FloatResultNode(1.1).addOther(new FloatResultNodeVector()).addOther(new FloatResultNode(3.3)), new FloatResultNodeVector());
+        assertCorrectSerialization(new IntegerResultNode(1).addOther(new IntegerResultNodeVector()).addOther(new IntegerResultNode(3)), new IntegerResultNodeVector());
+        assertCorrectSerialization(new Int16ResultNode((short) 1).addOther(new Int16ResultNodeVector()).addOther(new Int16ResultNode((short) 3)), new Int16ResultNodeVector());
+        assertCorrectSerialization(new Int8ResultNode((byte) 1).addOther(new Int8ResultNodeVector()).addOther(new Int8ResultNode((byte) 3)), new Int8ResultNodeVector());
+        assertCorrectSerialization(new StringResultNode("foo").addOther(new StringResultNodeVector()).addOther(new StringResultNode("bar")), new StringResultNodeVector());
+        assertCorrectSerialization(new RawResultNode(new byte[]{6, 9}).addOther(new RawResultNodeVector()).addOther(new RawResultNode(new byte[]{9, 6})), new RawResultNodeVector());
+        assertCorrectSerialization(new BoolResultNode(true).add(new BoolResultNodeVector()).add(new BoolResultNode(false)), new BoolResultNodeVector());
     }
 }
